{"componentChunkName":"component---src-templates-post-jsx","path":"/item-45/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","excerpt":"스트림이란? 스트림 API는 다야의 데이터 처리 작업(순차적이든 병렬적이든)을 돕고자 Java8부터 추가되었다.\n여기서 이 API가 제공하는 핵심 추상 개념은 다음 두 가지다. 데이터 원소의 유한 혹은 무한 시퀀스를 뜻하는 스트림 원소들로 수행하는 연산 단계를 표현한느 스트림 파이프라인 스트림의 원소들은 컬렉션, 배열, 파일, 정규표현식 패턴 매처, 난수…","html":"<h2 id=\"스트림이란\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%B4%EB%9E%80\" aria-label=\"스트림이란 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림이란?</h2>\n<p>스트림 API는 다야의 데이터 처리 작업(순차적이든 병렬적이든)을 돕고자 Java8부터 추가되었다.\n여기서 이 API가 제공하는 핵심 추상 개념은 다음 두 가지다.</p>\n<ul>\n<li>데이터 원소의 유한 혹은 무한 시퀀스를 뜻하는 스트림</li>\n<li>원소들로 수행하는 연산 단계를 표현한느 스트림 파이프라인</li>\n</ul>\n<p>스트림의 원소들은 컬렉션, 배열, 파일, 정규표현식 패턴 매처, 난수 생성기, 혹은 다른 스트림 등 어디로부터든 원소들이 올 수 있다.\n보통 스트림 안의 데이터 원소들은 객체 참조나 기본 타입 값인데, 기본 타입 값으로는 int, long, double 이렇게 세 가지를 지원한다.</p>\n<p>스트림은 이제 알겠는데 그럼 스트림 파이프라인은 무엇일까?\n스트림 파이프라인은 소스 스트림에서 시작해 종단 연산으로 끝나며, 그 사이에 중간 연산이 연결되는데, 이때 각 중간 연산은 변환을 한다.\n그래서 스트림의 원소 타입은 변환 전 스트림의 원소 타입과 같을 수도 있고, 다를 수도 있다.</p>\n<blockquote>\n<p>추가 설명을 하자면 중간 연산은 특정 조건을 만족 못하는 원소를 걸러내는 연산인 filter나 map 같은 연산을,\n종단 연산은 원소를 정렬해 컬렉션에 담거나 특정 원소 하나를 선택하거나 모든 원소를 출력하는 연산을 의미한다고 보면 된다.</p>\n</blockquote>\n<h3 id=\"스트림-파이프라인은-지연-평가된다\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%9D%80-%EC%A7%80%EC%97%B0-%ED%8F%89%EA%B0%80%EB%90%9C%EB%8B%A4\" aria-label=\"스트림 파이프라인은 지연 평가된다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림 파이프라인은 지연 평가된다.</h3>\n<p>스트림 평가는 종단 연산이 호출될 때 이뤄지며, 종단 연산에 쓰이지 않는 데이터 원소는 계산에 쓰이지 않는다.\n즉, 종단 연산이 없는 파이프 라인은 아무 일도 하지 않는 <code class=\"language-text\">no-op</code>같은 명령어이다.\n그러니, 종단 연산을 빼먹는 일이 절대 없도록 해야한다.</p>\n<h2 id=\"스트림-API\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-API\" aria-label=\"스트림 API permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림 API</h2>\n<p>스트림 API는 메서드 연쇄를 지원하는 플루언트 API다.\n즉, 파이프라인 하나를 구성하는 모든 호출을 연결하여 단 하나의 표현식으로 완성할 수 있다.\n그래서 파이프라인 여러 개를 갖다가 연결해서 표현식 하나로 만들 수도 있다.</p>\n<p>기본적으로 스트림 파이프라인은 순차적으로 수행되는데, 이때 병렬로 실행하려면 파이프라인을 구성하는 스트림 중 하나에서 <code class=\"language-text\">parallel</code>을 호출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 효과를 볼 수 있는 상황은 많지 않다.</p>\n<p>스트림 API는 다재다능하여 사실상 어떠한 계산이라도 해낼 수 있다.\n하지만 할 수 있다는 뜻이지, 해야한다는 뜻은 아니다.\n그 이유는 스트림을 제대로만 사용하면 코드가 짧고 깔끔해지지만, 잘못 사용하면 읽기 어렵고 유지보수도 힘들어진다.\n그리고 이러한 스트림을 언제 써야 하는지를 규정하는 확고부동한 규칙이 없다(그래도 노하우는 있으니 안심하자).</p>\n<h3 id=\"왜-주의해야-할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"왜 주의해야 할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>왜 주의해야 할까?</h3>\n<p>책에서는 아나그램 프로그램 코드를 이용해 케이스에 맞게 예시를 보여주며 교훈을 주고 있다..</p>\n<h4 id=\"스트림-없이-구현한-코드\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%97%86%EC%9D%B4-%EA%B5%AC%ED%98%84%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"스트림 없이 구현한 코드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림 없이 구현한 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">File</span> dictionary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사전 파일</span>\n\t\t<span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용자가 지정한 원소 수 문턱값</span>\n\n\t\t<span class=\"token comment\">// key : 알파벳 순으로 정렬한 값, value : 같은 키를 공유한 단어들을 담은 집합</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> groups <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//사전 파일에서 단어 읽음</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">String</span> word <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tgroups<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token function\">alphabetize</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>unused<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">//minGroupSize 보다 원소 수가 많은 아나그램 그룹 출력</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> group <span class=\"token operator\">:</span> groups<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 아나그램 그룹의 key를 만들어줌</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">alphabetize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"스트림을-과하게-사용한-코드\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EA%B3%BC%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"스트림을 과하게 사용한 코드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림을 과하게 사용한 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사전 파일 경로</span>\n\t\t<span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용자가 지정한 원소 수 문턱값</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// try-with-resources 문을 사용해 파일을 닫음</span>\n\t\t\t<span class=\"token comment\">// 사전을 여는 부분을 제외하고 프로그램 전체가 단 하나의 표현식으로 처리</span>\n\t\t\twords<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>word <span class=\"token operator\">-></span> word<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token class-name\">StringBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> group<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>확실히 짧아졌지만, 읽기가 어렵다. 그리고 이는 스트림에 익숙치 않은 프로그래머에게는 더 어려울 것이다.</p>\n<h4 id=\"스트림을-적절히-활용한-코드\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%A0%81%EC%A0%88%ED%9E%88-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"스트림을 적절히 활용한 코드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림을 적절히 활용한 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Anagrams</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Path</span> dictionary <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사전 파일 경로</span>\n\t\t<span class=\"token keyword\">int</span> minGroupSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용자가 지정한 원소 수 문턱값</span>\n\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// try-with-resources 문을 사용해 파일을 닫음</span>\n\t\t\twords<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Anagrams</span><span class=\"token operator\">::</span><span class=\"token function\">alphabetize</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// alphabetize 메서드로 단어들을 그룹화함</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">-></span> group<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> minGroupSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 문턱값보다 작은 것을 걸러냄</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>g <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필터링이 끝난 리스트 출력</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 아나그램 그룹의 key를 만들어줌</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">alphabetize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 스트림을 적절히 활용하면 깔끔하고 명료해진다.\n이때 주의할 점은 람다에서 타입 이름을 자주 생략하기 때문에 네이밍을 잘 해주어야한다.\n위 코드에서 보면 <code class=\"language-text\">forEach()</code> 안에 <code class=\"language-text\">g</code>의 경우, <code class=\"language-text\">group</code>이라고 네이밍해주면 된다.\n이렇게 람다의 매개변수도 네이밍을 적절히 해주면 파이프라인의 가독성이 스트림을 사용해도 떨어지지 않는다.</p>\n<blockquote>\n<p>아래 alphabetize 메소드에서는 스트림을 사용하지 않았다. 그 이유는 char의 스트림은 자바는 지원하지 않고 있기 때문이다. 여기서 알 수 있는 것은 char는 스트림을 삼가는 것이 좋다는 것이다.</p>\n</blockquote>\n<h2 id=\"리팩토링-관점에서의-스트림\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C%EC%9D%98-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"리팩토링 관점에서의 스트림 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>리팩토링 관점에서의 스트림</h2>\n<p>원래 반복문을 사용하고 있는 코드에 대해서는 최대한 스트림으로 리팩토링을 하지만 새로운 스트림 코드가 더 나을때만 진행하는 것이 좋다.\n책에서는 코드 블록과 람다 블록을 비교하며, 코드 블록이 더 나을 때는 스트림을 사용하지 않는 것이 좋다고 한다.</p>\n<p>그럼 코드 블록이 나을 때가 언제일까?\n람다에서는 <code class=\"language-text\">final</code>이거나 사실상 <code class=\"language-text\">final</code>인 변수만 읽을 수 있고, 지역 변수를 수정하는 건 불가능하다.\n하지만, 코드블록은 범위 안의 지역 변수를 읽고 수정할 수 있다.\n또 있다.\n코드 블록은 <code class=\"language-text\">return</code>, <code class=\"language-text\">break</code>, <code class=\"language-text\">continue</code> 등을 사용하거나 메서드 선언에 명시된 검사 예외를 던질 수 있지만,\n람다로는 이중 무엇도 할 수가 없다.\n이처럼 람다로는 할 수 없는 것들이 많기 때문에 코드 블록이 더 나을 때는 코드 블록을 사용하는 것이 좋다.</p>\n<p>그럼 언제 람다를 사용해야 할까?\n스트림으로 처리하기에 딱인 경우 또한 존재한다.\n다음은 스트림으로 처리하기에 적합한 경우이다.</p>\n<ul>\n<li>원소들의 시퀀스를 일관되게 변환하는 경우</li>\n<li>원소들의 시퀀스를 필터링하는 경우</li>\n<li>원소들의 시퀀스를 하나의 연산을 사용해 결합하는 경우</li>\n<li>원소들의 시퀀스를 하나의 컬렉션에 모아 넣는 경우</li>\n<li>원소들의 시퀀스에서 특정 조건을 만족하는 원소를 찾는 경우</li>\n</ul>\n<p>한편,스트림으로 처리하기 어려운 경우도 존재한다.\n대표적으로, 한 데이터가 파이프 라인의 여러 단계를 통과할 때 이 데이터의 각 단계에서의 값들에 동시 접근하기 어렵다.\n이유는 다른 값에 매핑하고 나면 원래의 값은 잃는 구조이기 때문이다.\n원래 값과 새로운 값의 쌍을 저장하는 객체를 사용해 매핑하는 우회 방법도 있지만, 복잡하기 때문에 사용하지 않는 것이 좋을 것이다.</p>\n<h2 id=\"스트림과-반복-중-어느-쪽을-써야-할까\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC%EA%B3%BC-%EB%B0%98%EB%B3%B5-%EC%A4%91-%EC%96%B4%EB%8A%90-%EC%AA%BD%EC%9D%84-%EC%8D%A8%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"스트림과 반복 중 어느 쪽을 써야 할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스트림과 반복 중 어느 쪽을 써야 할까?</h2>\n<p>코딩을 하다보면 스트림과 반복문 중 어느 쪽을 써야 할지 바로 알기 어려운 작업도 많다.\n그럼 어떻게 해야 할까?\n스트림을 사용해야 멋지게 처리할 수 있는 일이 있고, 반복 방식이 더 알맞은 일도 있다.\n그리고 수많은 작업이 이 둘을 조합했을 때 가장 멋지게 해결된다.\n처음에 말했듯이 어느쪽을 선택하는 확고부동한 규칙은 없지만, 방법은 있다고 했다.\n책에서는 다음과 같은 방법을 제시한다.\n<em><strong>스트림과 반복 중 어느 쪽이 나은지 확신하기 어렵다면 둘 다 해보고 더 나은 쪽을 택하라.</strong></em></p>","frontmatter":{"title":"스트림은 주의해서 사용하라","date":"February 05, 2025","update":null,"tags":["Java","Effective Java"],"series":"Effective Java"},"fields":{"slug":"/item-45/","readingTime":{"minutes":12.145}}},"seriesList":{"edges":[{"node":{"id":"9142cd48-5969-5dff-8b0a-1ca7f8164545","fields":{"slug":"/item-05/"},"frontmatter":{"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","fields":{"slug":"/item-16/"},"frontmatter":{"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라"}}},{"node":{"id":"b20a27d1-efe1-5df8-8fc6-70b1b621850d","fields":{"slug":"/item-15/"},"frontmatter":{"title":"클래스와 멤버의 접근 권한을 최소화하라"}}},{"node":{"id":"008bff3b-a610-5097-8737-2973f0ce221f","fields":{"slug":"/item-21/"},"frontmatter":{"title":"인터페이스는 구현하는 쪽을 생각해 설계하라"}}},{"node":{"id":"78d5ae48-9cb5-5099-8ecb-b3affdd38d6d","fields":{"slug":"/item-32/"},"frontmatter":{"title":"제네릭과 가변인수를 함께 쓸 때는 신중하라"}}},{"node":{"id":"7062e173-15fc-579c-9637-8d4985247b51","fields":{"slug":"/item-34/"},"frontmatter":{"title":"int 상수 대신 열거 타입을 사용하라"}}},{"node":{"id":"8371ee7e-c8e5-5d9e-9d38-b9b2746109f4","fields":{"slug":"/item-41/"},"frontmatter":{"title":"정의하려는 것이 타입이라면 마커 인터페이스를 사용하라"}}},{"node":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","fields":{"slug":"/item-45/"},"frontmatter":{"title":"스트림은 주의해서 사용하라"}}},{"node":{"id":"e8799441-784b-564e-abd8-f428bd17fbbf","fields":{"slug":"/item-50/"},"frontmatter":{"title":"적시에 방어적 복사본을 만들라"}}},{"node":{"id":"37fdf916-e063-5f1a-a06b-3568879ad41a","fields":{"slug":"/item-59/"},"frontmatter":{"title":"라이브러리를 익히고 사용하라"}}},{"node":{"id":"8ef87ff6-7121-5097-a925-9bc153b516c8","fields":{"slug":"/item-60/"},"frontmatter":{"title":"정확한 답이 필요하다면 float와 double은 피하라"}}},{"node":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","fields":{"slug":"/item-62/"},"frontmatter":{"title":"다른 타입이 적절하다면 문자열 사용을 피하라"}}},{"node":{"id":"04096e69-9c9c-5140-9c12-5e388d6a1dfb","fields":{"slug":"/item-70/"},"frontmatter":{"title":"복구할 수 있는 상황에는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"}}},{"node":{"id":"0c718971-d9cf-5605-a829-7e0d99f6c909","fields":{"slug":"/item-79/"},"frontmatter":{"title":"과도한 동기화는 피하라"}}},{"node":{"id":"cfe5306b-f333-58c7-83f3-3e9982147bbc","fields":{"slug":"/item-88/"},"frontmatter":{"title":"readObject 메서드는 방어적으로 작성하라"}}}]},"previous":{"fields":{"slug":"/boj-1051/"},"frontmatter":{"title":"1051 숫자 정사각형"}},"next":{"fields":{"slug":"/boj-2529/"},"frontmatter":{"title":"2529 부등호"}}},"pageContext":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","series":"Effective Java","previousPostId":"9dde491d-5904-5c61-84e7-7943094943bd","nextPostId":"a563c631-3d22-5595-9063-749fc5553ad3"}},"staticQueryHashes":[],"slicesMap":{}}