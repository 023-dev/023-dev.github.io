{"componentChunkName":"component---src-templates-post-jsx","path":"/item-62/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","excerpt":"문자열(String)은 텍스트를 표현하도록 설계되었다. 자바에서 문자열은 텍스트를 표현하도록 설계되었지만,\n원래 의도하지 않은 용도로도 쓰이는 경향이 있다.\n이번 주제에서는 문자열을 쓰지 않아야 할 사례를 다룬다. 문자열은 다른 값 타입을 대신하기에 적합하지 않다. 많은 개발자들은 다양한 타입의 데이터를 받을 때 주로 문자열을 사용한다.\n하지만, 진짜 문…","html":"<h2 id=\"문자열String은-텍스트를-표현하도록-설계되었다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4String%EC%9D%80-%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8F%84%EB%A1%9D-%EC%84%A4%EA%B3%84%EB%90%98%EC%97%88%EB%8B%A4\" aria-label=\"문자열String은 텍스트를 표현하도록 설계되었다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>문자열(String)은 텍스트를 표현하도록 설계되었다.</h2>\n<p>자바에서 문자열은 텍스트를 표현하도록 설계되었지만,\n원래 의도하지 않은 용도로도 쓰이는 경향이 있다.\n이번 주제에서는 문자열을 쓰지 않아야 할 사례를 다룬다.</p>\n<h2 id=\"문자열은-다른-값-타입을-대신하기에-적합하지-않다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EB%8B%A4%EB%A5%B8-%EA%B0%92-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%8B%A0%ED%95%98%EA%B8%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"문자열은 다른 값 타입을 대신하기에 적합하지 않다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>문자열은 다른 값 타입을 대신하기에 적합하지 않다.</h2>\n<p>많은 개발자들은 다양한 타입의 데이터를 받을 때 주로 문자열을 사용한다.\n하지만, 진짜 문자열일 때만 사용하는 것이 좋다.\n받은 데이터가 수치형이라면 int, float, BigInteger 등 적당한 타입을 사용해야 하고,\n예/아니오와 같은 질문의 답이라면 boolean을 사용해야 한다.\n즉, 기본 타입이든 참조 타입이든 적절한 값 타입이 있다면 그것을 사용하고, 없다면 새로 만들어 사용하는 것이 좋다.</p>\n<h2 id=\"문자열은-열거-타입을-대신하기에-적합하지-않다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%8B%A0%ED%95%98%EA%B8%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"문자열은 열거 타입을 대신하기에 적합하지 않다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>문자열은 열거 타입을 대신하기에 적합하지 않다.</h2>\n<p>아이템 34에서 다뤘듯이, 상수를 열거할 때는 문자열보다는 열거 타입이 월등히 낫다.\n열거 타입은 상수 데이터를 컴파일 타임에 알 수 있고, 타입 안전성을 제공하며, 이름을 프로그램 요소로 활용할 수 있다.\n하지만 상수를 문자열로 작성하는 경우 다음과 같이 예상치 못한 결과가 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFileExtension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"png\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"PNG\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFileExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PNG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// UNKNOWN</span>\n<span class=\"token function\">getFileExtension</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// UNKNOWN</span></code></pre></div>\n<p>따라서 이런 상황에서는 문자열 대신 열거 타입을 정의해서 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">FileType</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PNG</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JPG</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">GIF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">UNKNOWN</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FileType</span> <span class=\"token function\">getFileExtension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileType</span> fileType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fileType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">PNG</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">FileType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PNG</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">FileType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNKNOWN</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getFileExtension</span><span class=\"token punctuation\">(</span>png<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴파일 에러 발생</span></code></pre></div>\n<h2 id=\"문자열은-혼합-타입을-대신하기에-적합하지-않다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%ED%98%BC%ED%95%A9-%ED%83%80%EC%9E%85%EC%9D%84-%EB%8C%80%EC%8B%A0%ED%95%98%EA%B8%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"문자열은 혼합 타입을 대신하기에 적합하지 않다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>문자열은 혼합 타입을 대신하기에 적합하지 않다.</h2>\n<p>여러 요소가 혼합된 데이터를 하나의 문자열로 표현하는 경우도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> compoundKey <span class=\"token operator\">=</span> className <span class=\"token operator\">+</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 경우에는 각 요소를 개별로 접근할 수 없고, 문자열을 파싱해야 한다.\n이때 파싱 과정에서 느리고, 귀찮고, 오류 가능성도 커진다.\n그리고 <code class=\"language-text\">equals</code>, <code class=\"language-text\">toString</code>, <code class=\"language-text\">compareTo</code> 같은 메서드를 제공할 수 없고, <code class=\"language-text\">String</code>이 제공하는 기능에만 의존해야 한다.\n그래서 차라리 <a href=\"https://github.com/effective-java-3e-study/effective-java/blob/main/4%EC%9E%A5_%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/%EC%95%84%EC%9D%B4%ED%85%9C_24/%EB%A9%A4%EB%B2%84_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94_%EB%90%98%EB%8F%84%EB%A1%9D_static%EC%9C%BC%EB%A1%9C_%EB%A7%8C%EB%93%A4%EB%9D%BC.md\">아이템 24</a>에서 언급했듯이, <code class=\"language-text\">private</code> 정적 멤버 클래스로 만드는 것이 좋다.</p>\n<h2 id=\"문자열은-권한을-표현하기에-적합하지-않다\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%80-%EA%B6%8C%ED%95%9C%EC%9D%84-%ED%91%9C%ED%98%84%ED%95%98%EA%B8%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8B%A4\" aria-label=\"문자열은 권한을 표현하기에 적합하지 않다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>문자열은 권한을 표현하기에 적합하지 않다.</h2>\n<p>권한(capacity)을 문자열로 표현하는 경우가 있다.\n여기 <code class=\"language-text\">ThreadLocal</code> 클래스에서 문자열을 사용했다고 가정해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLoacl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체 생성 불가</span>\n    \n    <span class=\"token comment\">// 현 스레드의 값을 키로 구분해 저장한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// (키가 가리키는) 현 스레드의 값을 반환한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방식의 문제는 스레드 구분용 키가 전역 이름공간에서 공유 된다는 점이다.\n만약, 두 클라이언트가 서로 소통하지 못해 같은 키를 쓰기로 결정한다면, 의도치 않게 같은 변수를 공유하게 된다.\n만일 상대가 악의적인 클라이언트라면 의도적으로 같은 키를 사용하여 다른 클라이언트 값을 가져올 수도 있다.\n따라서 문자열 대신 위조할 수 없는 키를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 객체 생성 불가</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> key <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ((권한)</span>\n        <span class=\"token class-name\">Key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 위조 불가능한 고유 키를 생성한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Key</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Key</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Key</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">set</code>과 <code class=\"language-text\">get</code>은 이제 정적 메서드일 이유가 없으므로 <code class=\"language-text\">Key</code> 클래스의 인스턴스 메서드로 바꿀 수 있다.\n이렇게 하면 <code class=\"language-text\">Key</code>는 더 이상 스레드 지역변수를 구분하기 위한 키가 아니라, 그 자체가 스레드 지역변수가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리</h2>\n<p>“만드는 사람이 수고로우면 쓰는 사람이 편하고, 만드는 사람이 편하면 쓰는 사람이 수고롭다.”\n그냥 문자열을 쓰면 그때는 편할 수 있다. 하지만, 그것이 미래에 수고롭게 만들 수 있다.\n만일 더 나은 데이터 타입이 있거나 새로 만들 수 있다면, 그것을 사용하고 만들어야 한다.\n문자열은 잘못 사용하면 위에서 봤듯이 문제를 일으킬 수 있으므로, 주의해서 사용해야 한다.</p>","frontmatter":{"title":"다른 타입이 적절하다면 문자열 사용을 피하라","date":"February 23, 2025","update":null,"tags":["Java","Effective Java"],"series":"Effective Java"},"fields":{"slug":"/item-62/","readingTime":{"minutes":6.195}}},"seriesList":{"edges":[{"node":{"id":"9142cd48-5969-5dff-8b0a-1ca7f8164545","fields":{"slug":"/item-05/"},"frontmatter":{"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","fields":{"slug":"/item-16/"},"frontmatter":{"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라"}}},{"node":{"id":"b20a27d1-efe1-5df8-8fc6-70b1b621850d","fields":{"slug":"/item-15/"},"frontmatter":{"title":"클래스와 멤버의 접근 권한을 최소화하라"}}},{"node":{"id":"008bff3b-a610-5097-8737-2973f0ce221f","fields":{"slug":"/item-21/"},"frontmatter":{"title":"인터페이스는 구현하는 쪽을 생각해 설계하라"}}},{"node":{"id":"78d5ae48-9cb5-5099-8ecb-b3affdd38d6d","fields":{"slug":"/item-32/"},"frontmatter":{"title":"제네릭과 가변인수를 함께 쓸 때는 신중하라"}}},{"node":{"id":"7062e173-15fc-579c-9637-8d4985247b51","fields":{"slug":"/item-34/"},"frontmatter":{"title":"int 상수 대신 열거 타입을 사용하라"}}},{"node":{"id":"8371ee7e-c8e5-5d9e-9d38-b9b2746109f4","fields":{"slug":"/item-41/"},"frontmatter":{"title":"정의하려는 것이 타입이라면 마커 인터페이스를 사용하라"}}},{"node":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","fields":{"slug":"/item-45/"},"frontmatter":{"title":"스트림은 주의해서 사용하라"}}},{"node":{"id":"e8799441-784b-564e-abd8-f428bd17fbbf","fields":{"slug":"/item-50/"},"frontmatter":{"title":"적시에 방어적 복사본을 만들라"}}},{"node":{"id":"37fdf916-e063-5f1a-a06b-3568879ad41a","fields":{"slug":"/item-59/"},"frontmatter":{"title":"라이브러리를 익히고 사용하라"}}},{"node":{"id":"8ef87ff6-7121-5097-a925-9bc153b516c8","fields":{"slug":"/item-60/"},"frontmatter":{"title":"정확한 답이 필요하다면 float와 double은 피하라"}}},{"node":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","fields":{"slug":"/item-62/"},"frontmatter":{"title":"다른 타입이 적절하다면 문자열 사용을 피하라"}}},{"node":{"id":"04096e69-9c9c-5140-9c12-5e388d6a1dfb","fields":{"slug":"/item-70/"},"frontmatter":{"title":"복구할 수 있는 상황에는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"}}},{"node":{"id":"0c718971-d9cf-5605-a829-7e0d99f6c909","fields":{"slug":"/item-79/"},"frontmatter":{"title":"과도한 동기화는 피하라"}}}]},"previous":{"fields":{"slug":"/item-60/"},"frontmatter":{"title":"정확한 답이 필요하다면 float와 double은 피하라"}},"next":{"fields":{"slug":"/enablewebmvc-jackson/"},"frontmatter":{"title":"@EnableWebMvc 사용해도 될까?"}}},"pageContext":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","series":"Effective Java","previousPostId":"8ef87ff6-7121-5097-a925-9bc153b516c8","nextPostId":"63ced38b-1e3d-57de-b03b-906629d93cf3"}},"staticQueryHashes":[],"slicesMap":{}}