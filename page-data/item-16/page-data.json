{"componentChunkName":"component---src-templates-post-jsx","path":"/item-16/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","excerpt":"캡슐화의 이점을 제공하지 못하는 클래스 위와 같은 코드는 데이터 필드에 대한 직접적인 접근을 허용한다.\n이러한 코드는 캡슐화의 이점을 제공하지 못한다.(아이템15와 이어지는 맥락) API를 수정하지 않고는 내부 표현을 바꿀 수 없다.  필드로만 구성되어 있기 때문에 내부 표현을 변경하기 위해서는 외부 API를 변경해야 한다. 책에서는 다음과 같이  클래스…","html":"<h2 id=\"캡슐화의-이점을-제공하지-못하는-클래스\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EC%9D%98-%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%A0%9C%EA%B3%B5%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"캡슐화의 이점을 제공하지 못하는 클래스 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>캡슐화의 이점을 제공하지 못하는 클래스</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 코드는 데이터 필드에 대한 직접적인 접근을 허용한다.\n이러한 코드는 캡슐화의 이점을 제공하지 못한다.(아이템15와 이어지는 맥락)</p>\n<h3 id=\"API를-수정하지-않고는-내부-표현을-바꿀-수-없다\" style=\"position:relative;\"><a href=\"#API%EB%A5%BC-%EC%88%98%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0%EB%8A%94-%EB%82%B4%EB%B6%80-%ED%91%9C%ED%98%84%EC%9D%84-%EB%B0%94%EA%BF%80-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"API를 수정하지 않고는 내부 표현을 바꿀 수 없다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>API를 수정하지 않고는 내부 표현을 바꿀 수 없다.</h3>\n<p><code class=\"language-text\">public</code> 필드로만 구성되어 있기 때문에 내부 표현을 변경하기 위해서는 외부 API를 변경해야 한다.</p>\n<p>책에서는 다음과 같이 <code class=\"language-text\">Point</code> 클래스에 접근자 메서드를 추가하는 방법을 제시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token function\">getx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">gety</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"불변식을-보장할-수-없다\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80%EC%8B%9D%EC%9D%84-%EB%B3%B4%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"불변식을 보장할 수 없다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>불변식을 보장할 수 없다.</h3>\n<p><code class=\"language-text\">public</code> 필드는 클라이언트가 필드에 접근하여 값을 변경할 수 있기 때문에 불변식을 보장할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n    point<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x값 변경</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"외부에서-필드에-접근할-때-부수-작업을-수행할-수-없다\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%ED%95%84%EB%93%9C%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%A0-%EB%95%8C-%EB%B6%80%EC%88%98-%EC%9E%91%EC%97%85%EC%9D%84-%EC%88%98%ED%96%89%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"외부에서 필드에 접근할 때 부수 작업을 수행할 수 없다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>외부에서 필드에 접근할 때 부수 작업을 수행할 수 없다.</h3>\n<p>위 코드에서의 <code class=\"language-text\">point.x</code> 같이 필드에 직접 접근하는 경우, 1차원적인 접근만 가능해 필드에 접근할 때 추가적긴 연산 로직 같은 부수 작업을 삽입할 수 없다.</p>\n<h2 id=\"접근자와-수정자-메서드를-사용한-캡슐화\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%9E%90%EC%99%80-%EC%88%98%EC%A0%95%EC%9E%90-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"접근자와 수정자 메서드를 사용한 캡슐화 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>접근자와 수정자 메서드를 사용한 캡슐화</h2>\n<p>필드를 모두 <code class=\"language-text\">private</code>으로 선언하고, <code class=\"language-text\">public</code>한 접근자(<code class=\"language-text\">getter</code>)와 수정자(<code class=\"language-text\">setter</code>) 메서드를 사용하여 필드에 접근하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 패키지 외부에서 접근할 수 있는 클래스 접근자(<code class=\"language-text\">getter</code>,<code class=\"language-text\">setter</code>)를 제공하게 구현을 하면\n클래스 내부 표현 방식을 변경해도 API를 수정하지 않고도 변경할 수 있다.\n이러한 클래스의 내부 표현 방식으로 언제든지 내부표현을 유연하게 변경할 수 있다.</p>\n<h2 id=\"package-private-클래스나-private-중첩-클래스에서는-public-필드를-사용해도-된다\" style=\"position:relative;\"><a href=\"#package-private-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%82%98-private-%EC%A4%91%EC%B2%A9-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C%EB%8A%94-public-%ED%95%84%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%8F%84-%EB%90%9C%EB%8B%A4\" aria-label=\"package private 클래스나 private 중첩 클래스에서는 public 필드를 사용해도 된다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>package-private 클래스나 private 중첩 클래스에서는 public 필드를 사용해도 된다.</h2>\n<p>책에서는 또 다른 유용한 예로, <code class=\"language-text\">package-private</code> 클래스나 <code class=\"language-text\">private</code> 중첩 클래스을 들고 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">package-private</code> 클래스는 같은 패키지 내에서만 접근이 가능한 클래스이다.\n<code class=\"language-text\">private</code> 중첩 클래스는 해당 클래스를 포함하는 클래스 내에서만 접근이 가능한 클래스이다.</p>\n</blockquote>\n<p><code class=\"language-text\">package-private</code> 클래스나 <code class=\"language-text\">private</code> 중첩 클래스라면,\n필드를 노출해도 클래스가 표현하려는 추상 개념만 문제가 되지 않는다.</p>\n<p>다음 코드는 <code class=\"language-text\">private</code> 중첩 클래스에서 <code class=\"language-text\">public</code> 필드를 사용한 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">createPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 <code class=\"language-text\">Point</code> 클래스는 <code class=\"language-text\">Shape</code> 클래스 내부에 캡슐화되어 외부에서 직접적인 접근할 수 없다.\n하지만 <code class=\"language-text\">Shape</code> 클래스에서는 얼마든지 <code class=\"language-text\">Point</code> 객체를 생성하고, <code class=\"language-text\">Point</code> 객체의 필드에 접근할 수 있다.\n이렇게 함으로써 처음 제시된 3가지 문제점을 해결할 수 있고,\n클래스와 필드를 선언하는 면에서나 클라이언트 코드면에서나 접근자 방식보다 깔끔하게 표현이 된다.</p>\n<blockquote>\n<p><code class=\"language-text\">private</code> 중첩 클래스는 같은 패키지 내에서만 해당 클래스에 대한 접근이 가능하다면 값 변경 시\n생성한 객체를 통해서만 접근 및 변경이 가능하다.\n그래서 <code class=\"language-text\">package-private</code> 클래스보다 <code class=\"language-text\">private</code> 중첩 클래스가 더 제한적이다.</p>\n</blockquote>\n<h2 id=\"자바-라이브러리에서-public-클래스의-필드를-직접-노출시킨-사례\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%97%90%EC%84%9C-public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%95%84%EB%93%9C%EB%A5%BC-%EC%A7%81%EC%A0%91-%EB%85%B8%EC%B6%9C%EC%8B%9C%ED%82%A8-%EC%82%AC%EB%A1%80\" aria-label=\"자바 라이브러리에서 public 클래스의 필드를 직접 노출시킨 사례 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>자바 라이브러리에서 public 클래스의 필드를 직접 노출시킨 사례</h2>\n<p>자바 라이브러리에서도 public 클래스의 필드를 직접 노출하지 말라는 규칙을 어기는 경우가 있다.\n책에 서는 이러한 경우를 통해 타산지석으로 삼아야 한다고 한다며,\n대표적인 예로 <code class=\"language-text\">java.awt.package</code> 패키지의 <code class=\"language-text\">Point</code>와 <code class=\"language-text\">Dimension</code> 클래스를 들고 있다.</p>\n<h3 id=\"javaawtPoint-클래스-내부\" style=\"position:relative;\"><a href=\"#javaawtPoint-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%82%B4%EB%B6%80\" aria-label=\"javaawtPoint 클래스 내부 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a><code class=\"language-text\">java.awt.Point</code> 클래스 내부</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point2D</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"javaawtDimensoin-클래스-내부\" style=\"position:relative;\"><a href=\"#javaawtDimensoin-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%82%B4%EB%B6%80\" aria-label=\"javaawtDimensoin 클래스 내부 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a><code class=\"language-text\">java.awt.Dimensoin</code> 클래스 내부</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dimension</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Dimension2D</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"불변-필드를-노출한-public-클래스\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%ED%95%84%EB%93%9C%EB%A5%BC-%EB%85%B8%EC%B6%9C%ED%95%9C-public-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"불변 필드를 노출한 public 클래스 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>불변 필드를 노출한 public 클래스</h2>\n<p>그럼 <code class=\"language-text\">final</code> 키워드로 선언된 불변 필드를 노출하는 경우는 어떨까?\n책에서는 <code class=\"language-text\">public</code> 클래스에서 <code class=\"language-text\">final</code> 키워드로 선언된 불변 필드를 노출하는 것은 괜찮다고 한다.\n하지만 API를 변경하지 않고는 내부 표현을 바꿀 수 없다는 문제점과 부수 작업을 수행할 수 없다는 문제점은 여전히 남아있어\n추천하진 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Time</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">HOURS_PER_DAY</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MINUTES_PER_HOUR</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> minute<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hour<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hour <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> hour <span class=\"token operator\">>=</span> <span class=\"token constant\">HOURS_PER_DAY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"시간: \"</span> <span class=\"token operator\">+</span> hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minute <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> minute <span class=\"token operator\">>=</span> <span class=\"token constant\">MINUTES_PER_HOUR</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"분: \"</span> <span class=\"token operator\">+</span> minute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hour <span class=\"token operator\">=</span> hour<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>minute <span class=\"token operator\">=</span> minute<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리</h2>\n<p><code class=\"language-text\">public</code> 클래스는 절대로 가변 필드를 직접 노출해서는 안된다.\n불변 필드라도 <code class=\"language-text\">public</code>으로 선언하면 해당 필드를 수정할 수 없다는 보장이 없다.\n그럼에도 필드를 <code class=\"language-text\">public</code>으로 선언해야 하는 경우라면 <code class=\"language-text\">package-private</code> 클래스나 <code class=\"language-text\">private</code> 중첩 클래스에서 사용하는 방법을 사용하자.</p>","frontmatter":{"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라","date":"January 09, 2025","update":null,"tags":["Java","Effective Java"],"series":"Effective Java"},"fields":{"slug":"/item-16/","readingTime":{"minutes":7.38}}},"seriesList":{"edges":[{"node":{"id":"9142cd48-5969-5dff-8b0a-1ca7f8164545","fields":{"slug":"/item-05/"},"frontmatter":{"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","fields":{"slug":"/item-16/"},"frontmatter":{"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라"}}},{"node":{"id":"b20a27d1-efe1-5df8-8fc6-70b1b621850d","fields":{"slug":"/item-15/"},"frontmatter":{"title":"클래스와 멤버의 접근 권한을 최소화하라"}}},{"node":{"id":"008bff3b-a610-5097-8737-2973f0ce221f","fields":{"slug":"/item-21/"},"frontmatter":{"title":"인터페이스는 구현하는 쪽을 생각해 설계하라"}}},{"node":{"id":"78d5ae48-9cb5-5099-8ecb-b3affdd38d6d","fields":{"slug":"/item-32/"},"frontmatter":{"title":"제네릭과 가변인수를 함께 쓸 때는 신중하라"}}},{"node":{"id":"7062e173-15fc-579c-9637-8d4985247b51","fields":{"slug":"/item-34/"},"frontmatter":{"title":"int 상수 대신 열거 타입을 사용하라"}}},{"node":{"id":"8371ee7e-c8e5-5d9e-9d38-b9b2746109f4","fields":{"slug":"/item-41/"},"frontmatter":{"title":"정의하려는 것이 타입이라면 마커 인터페이스를 사용하라"}}},{"node":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","fields":{"slug":"/item-45/"},"frontmatter":{"title":"스트림은 주의해서 사용하라"}}},{"node":{"id":"e8799441-784b-564e-abd8-f428bd17fbbf","fields":{"slug":"/item-50/"},"frontmatter":{"title":"적시에 방어적 복사본을 만들라"}}},{"node":{"id":"37fdf916-e063-5f1a-a06b-3568879ad41a","fields":{"slug":"/item-59/"},"frontmatter":{"title":"라이브러리를 익히고 사용하라"}}},{"node":{"id":"8ef87ff6-7121-5097-a925-9bc153b516c8","fields":{"slug":"/item-60/"},"frontmatter":{"title":"정확한 답이 필요하다면 float와 double은 피하라"}}},{"node":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","fields":{"slug":"/item-62/"},"frontmatter":{"title":"다른 타입이 적절하다면 문자열 사용을 피하라"}}},{"node":{"id":"04096e69-9c9c-5140-9c12-5e388d6a1dfb","fields":{"slug":"/item-70/"},"frontmatter":{"title":"복구할 수 있는 상황에는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"}}},{"node":{"id":"0c718971-d9cf-5605-a829-7e0d99f6c909","fields":{"slug":"/item-79/"},"frontmatter":{"title":"과도한 동기화는 피하라"}}},{"node":{"id":"cfe5306b-f333-58c7-83f3-3e9982147bbc","fields":{"slug":"/item-88/"},"frontmatter":{"title":"readObject 메서드는 방어적으로 작성하라"}}}]},"previous":{"fields":{"slug":"/database-sql/"},"frontmatter":{"title":"SQL(Structured Query Language)"}},"next":{"fields":{"slug":"/database-constraints/"},"frontmatter":{"title":"제약 조건(Constraints)"}}},"pageContext":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","series":"Effective Java","previousPostId":"2f78f287-e52a-5403-8b0e-45e8406b20f8","nextPostId":"2f2d4165-e533-5227-83dc-c78a353a5843"}},"staticQueryHashes":[],"slicesMap":{}}