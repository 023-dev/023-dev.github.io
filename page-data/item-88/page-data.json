{"componentChunkName":"component---src-templates-post-jsx","path":"/item-88/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"cfe5306b-f333-58c7-83f3-3e9982147bbc","excerpt":"방어적 복사를 사용하는 불변 클래스 아이템 50에서는 불변식을 지키고 불변을 유지한 날짜 클래스를 만들기 위해,\n생성자와 접근자(getter)에서 Data 객체를 방어적으로 복사하도록 했다.\n다음이 그 클래스의 모습니다. 이 클래스를 직렬화를 하고자 한다면 물리적 표현과 논리적 표현이 같기 때문에 기본 직렬화 형태를 사용해도 무방할 것 같다.\n따라서 만 …","html":"<h2 id=\"방어적-복사를-사용하는-불변-클래스\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"방어적 복사를 사용하는 불변 클래스 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>방어적 복사를 사용하는 불변 클래스</h2>\n<p><a href=\"https://023-dev.github.io/item-50/\">아이템 50</a>에서는 불변식을 지키고 불변을 유지한 날짜 클래스를 만들기 위해,\n생성자와 접근자(getter)에서 Data 객체를 방어적으로 복사하도록 했다.\n다음이 그 클래스의 모습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Period</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @param  start 시작 시각\n     * @param  end 종료 시각; 시작 시각보다 뒤여야 한다.\n     * @throws IllegalArgumentException 시작 시각이 종료 시각보다 늦을 때 발생한다.\n     * @throws NullPointerException start나 end가 null이면 발생한다.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가변인 Date 클래스의 위험을 막기 위해 새로운 객체로 방어적 복사</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\" after \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> start <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ... 나머지 코드는 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 클래스를 직렬화를 하고자 한다면 물리적 표현과 논리적 표현이 같기 때문에 기본 직렬화 형태를 사용해도 무방할 것 같다.\n따라서 <code class=\"language-text\">Serializable</code>만 구현하면 될 것 같지만, 사실 실제로는 불변식을 보장하지 못하게 된다.</p>\n<p>그 이유는 <code class=\"language-text\">readObject</code> 메서드가 실질적으로 또 다른 <code class=\"language-text\">public</code> 생성자이기 때문이다.\n따라서 <code class=\"language-text\">readObject</code> 메서드도 다른 생성자와 똑같은 수준으로 주의를 기울여야 한다.</p>\n<h2 id=\"readObject-메서드\" style=\"position:relative;\"><a href=\"#readObject-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"readObject 메서드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>readObject 메서드</h2>\n<p>쉽게 말해, <code class=\"language-text\">readObject</code> 메서드는 매개변수로 바이트 스트림을 받는 생성자라고 할 수 있다.\n보통 바이트 스트림은 정상적으로 생성된 인스턴스를 직렬화해서 만들어진다.\n하지만 불변을 깨뜨릴 의도로 만들어진 바이트 스트림을 받으면 문제가 생긴다.\n이는 정상적인 생성자로는 만들어낼 수 없는 객체를 생성하기 때문이다.</p>\n<p>단순하게 앞서 살펴본 <code class=\"language-text\">Period</code> 클래스에 <code class=\"language-text\">Serializable</code> 구현을 추가했다고 가정했을 때,\n아래와 같은 코드는 불변식을 깨뜨리는 공격을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BogusPeriod</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 진짜 Period 인스턴스에서는 만들어질 수 없는 바이트 스트림,</span>\n    <span class=\"token comment\">// 정상적인 Period 인스턴스를 직렬화한 후에 손수 수정한 바이트 스트림이다.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> serializedForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xac</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xed</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 생략\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 상위 비트가 1인 바이트 값들은 byte로 형변환 했는데,</span>\n    <span class=\"token comment\">// 이유는 자바가 바이트 리터럴을 지원하지 않고 byte 타입은 부호가 있는(signed) 타입이기 때문이다.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Period</span><span class=\"token punctuation\">)</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>serializedForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 주어진 직렬화 형태(바이트 스트림)로부터 객체를 만들어 반환한다.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteArrayInputStream</span> byteArrayInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>sf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>byteArrayInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># 실행 결과<span class=\"token punctuation\">,</span> end가 start 보다 과거다<span class=\"token punctuation\">.</span> 즉<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Period</span>의 불변식이 깨진다<span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Fri</span> <span class=\"token class-name\">Jan</span> <span class=\"token number\">01</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> <span class=\"token constant\">PST</span> <span class=\"token number\">1999</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Sun</span> <span class=\"token class-name\">Jan</span> <span class=\"token number\">01</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> <span class=\"token constant\">PST</span> <span class=\"token number\">1984</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">Period</code>를 직혈화 할 수 있도록 선언한 것만으로도 클래스의 불변식을 깨뜨리는 객체를 만들 수 있게 된 것이다.</p>\n<h2 id=\"어떻게-방어할-수-있을까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%A9%EC%96%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"어떻게 방어할 수 있을까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>어떻게 방어할 수 있을까?</h2>\n<p>이 문제를 고치려면 <code class=\"language-text\">Period</code>의 <code class=\"language-text\">readObject</code> 메서드가 <code class=\"language-text\">defaultReadObject</code>를 호출하게 한 후에 역직렬화된 객체가 유효한지 검사해야 한다.\n여기서 유효성 검사에 실패한다면, <code class=\"language-text\">InvalidObjectException</code>을 던지게 해서 잘못된 역직렬화가 일어나는 것을 막을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 불변식을 만족하는지 검사한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\"after\"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 여기서도 문제가 존재하는데, 정상적인 <code class=\"language-text\">Period</code> 인스턴스에서 시작된 바이트 스트림 끝에 <code class=\"language-text\">private Date</code> 필드 참조를 추가하면 가변적인 인스턴스를 만들어 낼 수 있다.\n이때 공격자가 역직렬화를 통해 바이트 스트림 끝의 추가된 참조 값을 읽으면 <code class=\"language-text\">Period</code>의 내부 정부를 얻을 수 있다.\n이렇게 되면 참조로 얻은 <code class=\"language-text\">Date</code> 인스턴스들을 수정을 할 수 있게 되어, 더는 <code class=\"language-text\">Period</code> 인스턴스가 불변이 아니게 되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MutablePeriod</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Period 인스턴스</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Period</span> period<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 시작 시각 필드 - 외부에서 접근할 수 없어야 한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> start<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 종료 시각 필드 - 외부에서 접근할 수 없어야 한다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Date</span> end<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MutablePeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 유효한 Period 인스턴스를 직렬화한다.</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">/*\n             * 악의적인 '이전 객체 참조', 즉 내부 Date 필드로의 참조를 추가한다.\n             * 상세 내용은 자바 객체 직렬화 명세의 6.4절 참조.\n             */</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ref <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참조 #5</span>\n            bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작(start) 필드</span>\n            ref<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 참조 #4</span>\n            bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 종료(end) 필드</span>\n\n            <span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            period <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Period</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MutablePeriod</span> mp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Period</span> p <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>period<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Date</span> pEnd <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 시간을 되돌린다.</span>\n        pEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 60년대로 돌아간다.</span>\n        pEnd<span class=\"token punctuation\">.</span><span class=\"token function\">setYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Nov</span> <span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token constant\">PST</span> <span class=\"token number\">2017</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Nov</span> <span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token constant\">PST</span> <span class=\"token number\">1978</span>\n<span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Nov</span> <span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token constant\">PST</span> <span class=\"token number\">2017</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Sat</span> <span class=\"token class-name\">Nov</span> <span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">29</span> <span class=\"token constant\">PST</span> <span class=\"token number\">1969</span></code></pre></div>\n<p>이 문제의 원인은 <code class=\"language-text\">Period</code>의 <code class=\"language-text\">readObject</code> 메서드가 방어적 복사를 하지 않음에 있다.\n역직렬화를 할 때는 클라이언트가 접근해서는 안 되는 객체 참조를 갖는 필드는 모두 방어적으로 복사를 해야 한다.</p>\n<h2 id=\"방어적-복사와-유효성-검사를-모두-수행해야-한다\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EB%A5%BC-%EB%AA%A8%EB%91%90-%EC%88%98%ED%96%89%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"방어적 복사와 유효성 검사를 모두 수행해야 한다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>방어적 복사와 유효성 검사를 모두 수행해야 한다.</h2>\n<p>Period를 공격으로부터 보호하기 위해 방어적 복사를 유효성 검사보다 먼저 수행해야 한다.\n또한 Date의 clone 메서드는 사용되지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 가변 요소들을 방어적으로 복사한다.</span>\n    start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 불변식을 만족하는지 검사한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span><span class=\"token function\">compareto</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token string\">\" after \"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># <span class=\"token class-name\">MutablePeriod</span>의 main 메서드 출력 결과<span class=\"token punctuation\">.</span> \n<span class=\"token class-name\">Fri</span> <span class=\"token class-name\">May</span> <span class=\"token number\">31</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">06</span> <span class=\"token constant\">KST</span> <span class=\"token number\">2019</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fri</span> <span class=\"token class-name\">May</span> <span class=\"token number\">31</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">06</span> <span class=\"token constant\">KST</span> <span class=\"token number\">2019</span>\n<span class=\"token class-name\">Fri</span> <span class=\"token class-name\">May</span> <span class=\"token number\">31</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">06</span> <span class=\"token constant\">KST</span> <span class=\"token number\">2019</span> <span class=\"token operator\">-</span> <span class=\"token class-name\">Fri</span> <span class=\"token class-name\">May</span> <span class=\"token number\">31</span> <span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">01</span><span class=\"token operator\">:</span><span class=\"token number\">06</span> <span class=\"token constant\">KST</span> <span class=\"token number\">2019</span></code></pre></div>\n<p>해당 작업에 있어서 <code class=\"language-text\">final</code> 필드는 방어적 복사가 불가능하다.\n그래서 이 <code class=\"language-text\">readObject</code> 메서드를 사용하려면 <code class=\"language-text\">start</code>와 <code class=\"language-text\">end</code> 필드에서 <code class=\"language-text\">final</code> 한정자를 제거해야 한다.\n이 부분에 대해서 다른 보안적인 이슈와 트레이드 오프가 있겠지만, 앞서 살펴본 공격 위험에 노출되는 것보다 나은 방향이다.</p>\n<h2 id=\"그럼-언제-기본-readObject를-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%BC-%EC%96%B8%EC%A0%9C-%EA%B8%B0%EB%B3%B8-readObject%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"그럼 언제 기본 readObject를 사용해야 할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>그럼 언제 기본 readObject를 사용해야 할까?</h2>\n<p>transient 필드를 제외한 모든 필드의 값을 매개변수로 받아 유효성 검사를 없이도 필드에 대입하는 public 생성자를 추가해도 괜찮다고 판단되면 기본 readObject 메서드를 사용해도 된다.\n아닌 경우 직접 readObject 메서드를 정의하여 생성자에서 수행했어야 할 모든 유효성 검사와 방어적 복사를 수행해야 한다.\n가장 추천되는 것은 직렬화 프록시 패턴을 사용하는 것이다.\n역직렬화를 안전하게 만드는 데 필요한 노력을 줄여준다.</p>\n<p>final이 아닌 직렬화 가능한 클래스라면 생성자처럼 readObject 메서드도 재정의(overriding) 가능한 메서드를 호출해서는 안 된다.\n하위 클래스의 상태가 완전히 역직렬회되기 전에 하위 클래스에서 재정의된 메서드가 실행되기 때문이다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>정리</h2>\n<p><code class=\"language-text\">readObject</code> 메서드를 작성할 때는 언제나 <code class=\"language-text\">public</code> 생성자를 작성하는 자세로 임해야 한다.\n<code class=\"language-text\">readObject</code>는 어떤 바이트 스트림이 넘어오더라도 유효한 인스턴스를 만들어내야 한다.\n이 바이트 스트림이 항상 진짜 직렬화된 인스턴스라고 가정해서는 안 된다.</p>\n<p>해당 아이템에서는 기본 직렬화 형태를 사용해 예를 들었지만 커스텀 직렬화 또한 모든 문제가 그대로 발생할 수 있다.\n그래서 다음과 같은 지침을 따르는 것을 권장한다.</p>\n<ul>\n<li><code class=\"language-text\">private</code>이어야 하는 객체 참조 필드는 각 필드가 가리키는 객체를 방어적으로 복사하라. 불변 클래스 내의 가변 요소가 여기 속한다.</li>\n<li>모든 불변식을 검사하여 어긋나는 게 발견되면 <code class=\"language-text\">InvalidObjectException</code>을 던져라. 방어적 복사 다음에는 반드시 불변식 검사가 뒤따라야 한다.</li>\n<li>역직렬화 후 객체 그래프 전체의 유효성을 검사해야 한다면 <code class=\"language-text\">ObjectInputValidation</code> 인터페이스를 사용하라.</li>\n<li>직접적이든 간접적이든, 재정의할 수 있는 메서드는 호출하지 말자.</li>\n</ul>","frontmatter":{"title":"readObject 메서드는 방어적으로 작성하라","date":"March 13, 2025","update":null,"tags":["Java","Effective Java"],"series":"Effective Java"},"fields":{"slug":"/item-88/","readingTime":{"minutes":11.865}}},"seriesList":{"edges":[{"node":{"id":"9142cd48-5969-5dff-8b0a-1ca7f8164545","fields":{"slug":"/item-05/"},"frontmatter":{"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"5e51d765-fc56-5fc0-9efb-93e8c323c43c","fields":{"slug":"/item-16/"},"frontmatter":{"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라"}}},{"node":{"id":"b20a27d1-efe1-5df8-8fc6-70b1b621850d","fields":{"slug":"/item-15/"},"frontmatter":{"title":"클래스와 멤버의 접근 권한을 최소화하라"}}},{"node":{"id":"008bff3b-a610-5097-8737-2973f0ce221f","fields":{"slug":"/item-21/"},"frontmatter":{"title":"인터페이스는 구현하는 쪽을 생각해 설계하라"}}},{"node":{"id":"78d5ae48-9cb5-5099-8ecb-b3affdd38d6d","fields":{"slug":"/item-32/"},"frontmatter":{"title":"제네릭과 가변인수를 함께 쓸 때는 신중하라"}}},{"node":{"id":"7062e173-15fc-579c-9637-8d4985247b51","fields":{"slug":"/item-34/"},"frontmatter":{"title":"int 상수 대신 열거 타입을 사용하라"}}},{"node":{"id":"8371ee7e-c8e5-5d9e-9d38-b9b2746109f4","fields":{"slug":"/item-41/"},"frontmatter":{"title":"정의하려는 것이 타입이라면 마커 인터페이스를 사용하라"}}},{"node":{"id":"d92c4181-6f18-5bd8-8112-ebdeea20d1b8","fields":{"slug":"/item-45/"},"frontmatter":{"title":"스트림은 주의해서 사용하라"}}},{"node":{"id":"e8799441-784b-564e-abd8-f428bd17fbbf","fields":{"slug":"/item-50/"},"frontmatter":{"title":"적시에 방어적 복사본을 만들라"}}},{"node":{"id":"37fdf916-e063-5f1a-a06b-3568879ad41a","fields":{"slug":"/item-59/"},"frontmatter":{"title":"라이브러리를 익히고 사용하라"}}},{"node":{"id":"8ef87ff6-7121-5097-a925-9bc153b516c8","fields":{"slug":"/item-60/"},"frontmatter":{"title":"정확한 답이 필요하다면 float와 double은 피하라"}}},{"node":{"id":"b3f590e8-63d6-5dff-8ff4-2b714334f8da","fields":{"slug":"/item-62/"},"frontmatter":{"title":"다른 타입이 적절하다면 문자열 사용을 피하라"}}},{"node":{"id":"04096e69-9c9c-5140-9c12-5e388d6a1dfb","fields":{"slug":"/item-70/"},"frontmatter":{"title":"복구할 수 있는 상황에는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"}}},{"node":{"id":"0c718971-d9cf-5605-a829-7e0d99f6c909","fields":{"slug":"/item-79/"},"frontmatter":{"title":"과도한 동기화는 피하라"}}},{"node":{"id":"cfe5306b-f333-58c7-83f3-3e9982147bbc","fields":{"slug":"/item-88/"},"frontmatter":{"title":"readObject 메서드는 방어적으로 작성하라"}}}]},"previous":{"fields":{"slug":"/server-monitoring/"},"frontmatter":{"title":"서버 모니터링에 대한 생각"}},"next":{"fields":{"slug":"/bastion-host/"},"frontmatter":{"title":"AWS Bastion Host"}}},"pageContext":{"id":"cfe5306b-f333-58c7-83f3-3e9982147bbc","series":"Effective Java","previousPostId":"a6191ffd-2529-5df8-984b-8fda6c70c299","nextPostId":"4a640eb1-312c-5046-a330-010c52c6c644"}},"staticQueryHashes":[],"slicesMap":{}}