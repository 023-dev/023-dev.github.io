{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Effective-Java/","result":{"data":{"posts":{"nodes":[{"excerpt":"많은 경우의 클래스들은 하나 이상의 리소스에 의존하는 양상을 띈다.\n알림을 보내는  클래스와 이메일을 보내는  클래스가 있다고 가정해보자.\n는 를 사용하여 이메일을 보낸다.\n여기서 가  리소스에 의존한다고 말한다.\n이때  클래스는 다음과 같이 구현하는 경우가 있다. 정적 유틸리티 클래스(Static Utility Class) 다음 코드는 알림을 보내는 를…","fields":{"slug":"/item-05/"},"frontmatter":{"date":"January 01, 2025","update":null,"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라","tags":["Java"]}},{"excerpt":"캡슐화의 이점을 제공하지 못하는 클래스 위와 같은 코드는 데이터 필드에 대한 직접적인 접근을 허용한다.\n이러한 코드는 캡슐화의 이점을 제공하지 못한다.(아이템15와 이어지는 맥락) API를 수정하지 않고는 내부 표현을 바꿀 수 없다.  필드로만 구성되어 있기 때문에 내부 표현을 변경하기 위해서는 외부 API를 변경해야 한다. 책에서는 다음과 같이  클래스…","fields":{"slug":"/item-16/"},"frontmatter":{"date":"January 09, 2025","update":null,"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라","tags":["Java"]}},{"excerpt":"잘 설계된 컴포넌트 책에서는 잘 설계된 컴포넌트에 대해 다음과 같이 설명한다. 클래스 내부 데이터와 내부 구현 정보를 외부로 부터 잘 숨겨야 한다. API를 통해서만 다른 컴포넌트와 소통해야 하며, 내부 동작 방식에 개의치 않아야 한다. 이는 캡슐화(정보 은닉)의 개념으로, 이를 잘 지키는 것이 잘 설계된 컴포넌트라고 말하고 있다. 캡슐화의 장점 캡슐화는…","fields":{"slug":"/item-15/"},"frontmatter":{"date":"January 16, 2025","update":null,"title":"클래스와 멤버의 접근 권한을 최소화하라","tags":["Java"]}},{"excerpt":"자바 8 이전에는 기존 인터페이스에 메서드르 추하려면 기존 구현체를 수정해야 했고,\n이를 안할 시 컴파일 오률를 일으켰다.\n자바 8에서는 디폴트 메서드라는 기능을 도입하면서 인터페이스에 새로운 메서드를 추가할 수 있게 되었지만,\n모든 상황에 대비하여 안전하게 동작하리라는 보장은 없다. 디폴트 메서드와 위험성 디폴트 메서드는 인터페이스 구현체에서 재정의하지…","fields":{"slug":"/item-21/"},"frontmatter":{"date":"January 16, 2025","update":null,"title":"인터페이스는 구현하는 쪽을 생각해 설계하라","tags":["Java"]}},{"excerpt":"스트림이란? 스트림 API는 다야의 데이터 처리 작업(순차적이든 병렬적이든)을 돕고자 Java8부터 추가되었다.\n여기서 이 API가 제공하는 핵심 추상 개념은 다음 두 가지다. 데이터 원소의 유한 혹은 무한 시퀀스를 뜻하는 스트림 원소들로 수행하는 연산 단계를 표현한느 스트림 파이프라인 스트림의 원소들은 컬렉션, 배열, 파일, 정규표현식 패턴 매처, 난수…","fields":{"slug":"/item-45/"},"frontmatter":{"date":"February 05, 2025","update":null,"title":"스트림은 주의해서 사용하라","tags":["Java"]}}]}},"pageContext":{"series":"Effective Java"}},"staticQueryHashes":[],"slicesMap":{}}