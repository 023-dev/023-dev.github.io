{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Effective-Java/","result":{"data":{"posts":{"nodes":[{"excerpt":"많은 경우의 클래스들은 하나 이상의 리소스에 의존하는 양상을 띈다.\n알림을 보내는  클래스와 이메일을 보내는  클래스가 있다고 가정해보자.\n는 를 사용하여 이메일을 보낸다.\n여기서 가  리소스에 의존한다고 말한다.\n이때  클래스는 다음과 같이 구현하는 경우가 있다. 정적 유틸리티 클래스(Static Utility Class) 다음 코드는 알림을 보내는 를…","fields":{"slug":"/item-05/"},"frontmatter":{"date":"January 01, 2025","update":null,"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"캡슐화의 이점을 제공하지 못하는 클래스 위와 같은 코드는 데이터 필드에 대한 직접적인 접근을 허용한다.\n이러한 코드는 캡슐화의 이점을 제공하지 못한다.(아이템15와 이어지는 맥락) API를 수정하지 않고는 내부 표현을 바꿀 수 없다.  필드로만 구성되어 있기 때문에 내부 표현을 변경하기 위해서는 외부 API를 변경해야 한다. 책에서는 다음과 같이  클래스…","fields":{"slug":"/item-16/"},"frontmatter":{"date":"January 09, 2025","update":null,"title":"public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"잘 설계된 컴포넌트 책에서는 잘 설계된 컴포넌트에 대해 다음과 같이 설명한다. 클래스 내부 데이터와 내부 구현 정보를 외부로 부터 잘 숨겨야 한다. API를 통해서만 다른 컴포넌트와 소통해야 하며, 내부 동작 방식에 개의치 않아야 한다. 이는 캡슐화(정보 은닉)의 개념으로, 이를 잘 지키는 것이 잘 설계된 컴포넌트라고 말하고 있다. 캡슐화의 장점 캡슐화는…","fields":{"slug":"/item-15/"},"frontmatter":{"date":"January 16, 2025","update":"Jan 17, 2025","title":"클래스와 멤버의 접근 권한을 최소화하라","tags":["Java","Effective Java"]}},{"excerpt":"자바 8 이전에는 기존 인터페이스에 메서드르 추하려면 기존 구현체를 수정해야 했고,\n이를 안할 시 컴파일 오률를 일으켰다.\n자바 8에서는 디폴트 메서드라는 기능을 도입하면서 인터페이스에 새로운 메서드를 추가할 수 있게 되었지만,\n모든 상황에 대비하여 안전하게 동작하리라는 보장은 없다. 디폴트 메서드와 위험성 디폴트 메서드는 인터페이스 구현체에서 재정의하지…","fields":{"slug":"/item-21/"},"frontmatter":{"date":"January 16, 2025","update":null,"title":"인터페이스는 구현하는 쪽을 생각해 설계하라","tags":["Java","Effective Java"]}},{"excerpt":"가변인수와 제네릭이 함께 사용될 때의 허점 가변인수(varargs): 메서드에 넘기는 인수의 개수를 클라이언트가 조절할 수 있게 해준다. 가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어지게 된다.\n이 배열은 내부로 감춰야 하지만, 클라이언트에 노출하는 문제가 발생할 수 있다. 이로 인해 가변인수 매개변수에 제네릭같은 실체화 불…","fields":{"slug":"/item-32/"},"frontmatter":{"date":"January 23, 2025","update":null,"title":"제네릭과 가변인수를 함께 쓸 때는 신중하라","tags":["Java","Effective Java"]}},{"excerpt":"열거 타입: 일정 개수의 상수 값을 정의한 다음, 그외의 값은 허용하지 않는 타입 정수 열거 패턴의 단점 기존 정수 열거 패턴(int enum pattern)은 타입 안전을 보장할 방법이 없고 표현력이 좋지 않다는 단점이 존재한다.\n위 코드에서 에서 를 동등 비교()를 해도 컴파일러의 경고 메시지가 없다. 자바에서는 정수 열거 패턴을 위한 별도 이름 공간…","fields":{"slug":"/item-34/"},"frontmatter":{"date":"January 29, 2025","update":null,"title":"int 상수 대신 열거 타입을 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"마커 인터페이스 아무 메서드도 담고 있지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 표시해주는 인터페이스를 마커 인터페이스(marker interface)라고 한다.  인터페이스가 대표적인 마커 인터페이스이다. 이 인터페이스를 구현한 클래스는 직렬화할 수 있다는 것을 나타낸다. 실제로  인터페이스는 아무 메서드도 담고 있지 않다. 단지 클래스가 이…","fields":{"slug":"/item-41/"},"frontmatter":{"date":"January 30, 2025","update":null,"title":"정의하려는 것이 타입이라면 마커 인터페이스를 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"스트림이란? 스트림 API는 다야의 데이터 처리 작업(순차적이든 병렬적이든)을 돕고자 Java8부터 추가되었다.\n여기서 이 API가 제공하는 핵심 추상 개념은 다음 두 가지다. 데이터 원소의 유한 혹은 무한 시퀀스를 뜻하는 스트림 원소들로 수행하는 연산 단계를 표현한느 스트림 파이프라인 스트림의 원소들은 컬렉션, 배열, 파일, 정규표현식 패턴 매처, 난수…","fields":{"slug":"/item-45/"},"frontmatter":{"date":"February 05, 2025","update":null,"title":"스트림은 주의해서 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"자바는 안전한 언어다 자바는 네이티브 메서드를 사용하지 않기 때문에 버퍼 오버런, 배열 오버런, 와일드 포인터 같은 메모리 충돌 오류에서 비교적 안전하다.\n또한 자바로 작성한 클래스는 시스템의 다른 부분에서 무슨 짓을 하든 기본적으로 불변성을 유지할 수 있도록 설계되었지만, 모든 경우에 자동으로 보호되는 것은 아니다. 왜 방어적으로 프로그래밍 해야할까? …","fields":{"slug":"/item-50/"},"frontmatter":{"date":"February 13, 2025","update":null,"title":"적시에 방어적 복사본을 만들라","tags":["Java","Effective Java"]}},{"excerpt":"라이브러리에 익숙치 않으면 발생할 수 있는 문제 아래는 무작위 수를 백만 개를 생성한 다음, 그중 중간 값보다 작은 게 몇 개인지를 출력하는 코드다. 괜찮은 듯 보여도 적지않은 문제를 내포하고 있다. n이 그리 크지 않은 2의 제곱수라면 얼마 지나지 않아 같은 수열이 반복된다. n이 2의 제곱수가 아니라면 몇몇 숫자가 평균적으로 더 자주 반환된다. n 값…","fields":{"slug":"/item-59/"},"frontmatter":{"date":"February 21, 2025","update":null,"title":"라이브러리를 익히고 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"대부분 소수점을 표현하고자 할 때는 int나 long을 사용한다.\nfloat와 double 타입은 넓은 범위의 수를 빠르게 정밀한 '근사치'로 계산하도록 세심하게 설계되었다.\n따라서 float와 double 타입은 특히 금융 관련 계산과 같은 정확한 결과가 필요할 때는 사용하면 안 된다. float와 double을 피하라 예를 들어 주머니에는 1달러가 있…","fields":{"slug":"/item-60/"},"frontmatter":{"date":"February 22, 2025","update":null,"title":"정확한 답이 필요하다면 float와 double은 피하라","tags":["Java","Effective Java"]}},{"excerpt":"문자열(String)은 텍스트를 표현하도록 설계되었다. 자바에서 문자열은 텍스트를 표현하도록 설계되었지만,\n원래 의도하지 않은 용도로도 쓰이는 경향이 있다.\n이번 주제에서는 문자열을 쓰지 않아야 할 사례를 다룬다. 문자열은 다른 값 타입을 대신하기에 적합하지 않다. 많은 개발자들은 다양한 타입의 데이터를 받을 때 주로 문자열을 사용한다.\n하지만, 진짜 문…","fields":{"slug":"/item-62/"},"frontmatter":{"date":"February 23, 2025","update":null,"title":"다른 타입이 적절하다면 문자열 사용을 피하라","tags":["Java","Effective Java"]}}]}},"pageContext":{"series":"Effective Java"}},"staticQueryHashes":[],"slicesMap":{}}