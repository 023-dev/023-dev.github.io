{"componentChunkName":"component---src-templates-post-jsx","path":"/database-explain-query-hint/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"ff01aabc-69b7-5efa-b11e-9b2c2c6007ff","excerpt":"랜덤 I/O와 순차 I/O 랜덤 I/O는 임의의 위치에 있는 데이터를 읽거나 쓰는 입출력 작업이다. 순차 I/O는 연속적인 순서대로 데이터를 읽거나 쓰는 입출력 작업이다. HDD에서 랜덤 I/O는 순차 I/O에 비해 헤더의 움직임이 많기 때문에 느립니다. 이는 SSD에서도 마찬가지입니다. 인덱스 인덱스는 컬럼의 값과 레코드의 주소를 Key-Value 삼아…","html":"<h2 id=\"랜덤-IO와-순차-IO\" style=\"position:relative;\"><a href=\"#%EB%9E%9C%EB%8D%A4-IO%EC%99%80-%EC%88%9C%EC%B0%A8-IO\" aria-label=\"랜덤 IO와 순차 IO permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>랜덤 I/O와 순차 I/O</h2>\n<ul>\n<li>랜덤 I/O는 임의의 위치에 있는 데이터를 읽거나 쓰는 입출력 작업이다.</li>\n<li>순차 I/O는 연속적인 순서대로 데이터를 읽거나 쓰는 입출력 작업이다.</li>\n</ul>\n<p>HDD에서 랜덤 I/O는 순차 I/O에 비해 헤더의 움직임이 많기 때문에 느립니다. 이는 SSD에서도 마찬가지입니다.</p>\n<h2 id=\"인덱스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4\" aria-label=\"인덱스 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>인덱스</h2>\n<ul>\n<li>인덱스는 컬럼의 값과 레코드의 주소를 Key-Value 삼아놓은 정보이다.</li>\n<li>데이터베이스는 인덱스를 통해 빠르게 레코드를 조회할 수 있다.</li>\n<li>빠른 조회를 위해 인덱스는 항상 정렬되어 있다는 특징이 있는데, 이 때문에 레코드의 삽입/수정/삭제 성능이 희생된다는 단점이 있다.</li>\n</ul>\n<h2 id=\"인덱스의-동작-방식\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\" aria-label=\"인덱스의 동작 방식 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>인덱스의 동작 방식</h2>\n<p>B Tree 인덱스 기준으로 설명 드리겠습니다.\n사용자 요청으로 들어온 select 쿼리의 where에 인덱스가 걸린 컬럼이 조건으로 들어있다면,\n컬럼 값에 해당하는 레코드를 찾기위해 B Tree의 루트 노드부터 시작해서 브랜치 노드를 거쳐 해당하는 리프 노드를 찾습니다.\n그 다음 리프 노드에 있는 레코드의 실제 주소값을 따라 데이터 파일에서 레코드를 조회해옵니다.\n어떤 기준으로 인덱스를 설정해야할까요?\n검색 조건에 주로 사용되고 카디널리티가 높은 컬럼을 인덱스로 설정하면 좋습니다.\n카디널리티는 인덱스에 해당하는 컬럼 기준으로 테이블에서 유일한 레코드 개수를 의미합니다.\n카디널리티가 높을 컬럼에 인덱스를 걸면 그만큼 검색 대상이 줄어들기 때문에 빠르게 레코드에 접근할 수 있습니다.</p>\n<h2 id=\"테이블에-인덱스를-많이-설정하면-좋을까\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EB%A5%BC-%EB%A7%8E%EC%9D%B4-%EC%84%A4%EC%A0%95%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"테이블에 인덱스를 많이 설정하면 좋을까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>테이블에 인덱스를 많이 설정하면 좋을까?</h2>\n<p><strong>인덱스를 많이 설정하면 좋지 않습니다.</strong></p>\n<p><strong>인덱스 자체를 저장하는 공간이 필요하기도 하고,</strong></p>\n<p><strong>인덱스는 빠른 검색을 위해 항상 정렬된 상태를 유지해야하므로,</strong></p>\n<p><strong>인덱스가 많아진다면 데이터 삽입, 수정, 삭제 성능이 저하될 우려가 있습니다.</strong></p>\n<p><strong>따라서 인덱스를 추가할때는 데이터의 삽입,수정,삭제 성능을 얼마나 희생하고,</strong></p>\n<p><strong>읽기 성능은 얼마나 빠르게 해야할지 고민하고 결정해야합니다.</strong></p>\n<ul>\n<li>\n<p>커버링 인덱스(Covering index)</p>\n<p><strong>쿼리 조회 결과가 인덱스에 해당하는 컬럼 값으로만 이루어진 것을 커버링 인덱스라고 합니다.</strong></p>\n<p><strong>커버링 인덱스로 처리되는 쿼리는 디스크의 레코드를 읽지 않아도 되기 때문에 그만큼 랜덤 엑세스가 줄어들고 성능은 빨라집니다.</strong></p>\n</li>\n<li>\n<p>다중 컬럼 인덱스(Multi-column index, 복합 인덱스)</p>\n<p><strong>다중 컬럼 인덱스는 2개 이상의 컬럼으로 이루어진 인덱스입니다.</strong></p>\n<p><strong>2개의 컬럼으로 이루어진 인덱스가 있을때,</strong></p>\n<p><strong>인덱스의 두 번째 컬럼은 첫 번째 컬럼에 의존해서 정렬된다는 특징이 있다는 것을 고려해서 사용해야합니다.</strong></p>\n</li>\n<li>\n<p>B-Tree 인덱스와 B+Tree 인덱스</p>\n<p><strong>B-Tree와 B+Tree는 둘다 Balanced Tree 자료구조로 구현된 인덱스 저장 방식입니다.</strong></p>\n<p><strong>B-Tree와 달리 B+Tree는 리프 노드에만 값을 담아 놓는다는 특징이 있습니다.</strong></p>\n</li>\n<li>\n<p>Hash 인덱스</p>\n<p><strong>Hash 인덱스는 컬럼의 값으로 해시값을 계산해서 인덱스로 사용하는 알고리즘 입니다.</strong>\n<strong>매우 빠른 검색을 지원하지만 값을 변형해서 인덱스로 사용하므로 prefix 일치 검색 또는 범위 검색에서는 사용될 수 없다는 단점이 있습니다.</strong></p>\n</li>\n<li>\n<p>클러스터링 인덱스</p>\n<p><strong>클러스터링 인덱스 기본키가 비슷한 레코드끼리 묶어서 인접한 물리적 위치에 저장하는 것을 뜻합니다.</strong>\n<strong>주로 비슷한 값들을 동시에 조회하는 경우가 많은데, 이에 착안해서 생긴 레코드 저장 방식입니다.</strong>\n<strong>클러스터링 인덱스로 저장되는 테이블은 기본키 기반 검색이 매우 빠릅니다.</strong>\n<strong>MySQL의 innoDB 엔진은 기본적으로 클러스터링 인덱스로 저장됩니다.</strong></p>\n</li>\n<li>\n<p>인덱스 스캔 방식</p>\n<p><strong>B Tree 기준으로 인덱스 레인지 스캔과 인덱스 풀 스캔에 대해 설명해주세요.</strong>\n<strong>인덱스 레인지 스캔은 검색 해야할 인덱스의 범위가 결정 됐을때 사용하는 방식입니다.</strong>\n<strong>루트 노드, 브랜치 노드를 거쳐 검색 시작점 리프 노드를 찾고,</strong>\n<strong>리프 노드간의 링크를 통해 검색 종료점 리프 노드까지 스캔하면서 레코드를 랜덤 엑세스로 읽어 들입니다.</strong>\n<strong>인덱스 풀 스캔은 인덱스의 처음부터 끝까지 모두 스캔하는 방식입니다.</strong>\n<strong>예를들어 a,b,c 컬럼에 복합 인덱스가 걸려있고 쿼리의 조건절에는 b 또는 c 컬럼이 들어가 있을 경우 인덱스 풀 스캔이 발생합니다. 테이블 풀 스캔보다는 효율적입니다.</strong></p>\n</li>\n<li>\n<p>쿼리 실행 계획에 대해서 설명해주세요. 실행 계획을 확인해본적이 있나요?</p>\n<p><strong>실행 계획은 옵티마이저가 SQL을 어떻게 실행할지에 대한 계획입니다.</strong>\n<strong>옵티마이저는 SQL을 효율적으로 실행하기 위해,</strong>\n<strong>SQL의 비용을 고려하거나 규칙 기반으로 실행계획을 생성하여 SQL을 실행 시킵니다.</strong>\n<strong>EXPLAIN 키워드를 통해 사용자가 직접 쿼리에 대한 실행 계획을 확인할 수 있습니다.</strong></p>\n</li>\n<li>\n<p>쿼리 힌트</p>\n<p><strong>쿼리 힌트(Query Hint)는 데이터베이스 옵티마이저에게 특정 실행 계획을 사용하도록 지시하는 역할을 합니다. 힌트를 사용하여 옵티마이저가 쿼리를 처리하는 방식을 직접 제어할 수 있습니다. 힌트는 주로 성능 최적화나 예상치 못한 실행 계획을 수정하고자 할 때 사용됩니다.</strong></p>\n</li>\n<li>\n<p>인덱스가 잘 동작하고 있는지 어떻게 확인하는 방법</p>\n<p><strong>쿼리에 대한 실행 계획을 보면서 인덱스가 어떻게 걸리는지 확인하고 실제로 쿼리를 날려봐서 조회 속도를 측정해 봅니다.</strong>\n<strong>또는 select * from sys.schema_unused_indexes 쿼리를 날려서 사용되지 않는 인덱스가 있는지 확인합니다.</strong></p>\n</li>\n<li>\n<p>인덱스 사용시 주의해야할 점</p>\n<p><strong>인덱스 키 값이 너무 길어지게 하지 않습니다.</strong>\n<strong>인덱스 키 값이 길어지면 인덱스 정보들을 담고 있는 페이지 개수가 많아집니다.</strong>\n<strong>이는 디스크로부터 페이지를 읽어야 하는 횟수가 늘어나는 걸 뜻하고,</strong>\n<strong>랜덤 엑세스 횟수가 증가하는 것을 뜻하기 때문에 조회 속도가 느려지는 결과를 가져올 수 있습니다.</strong></p>\n</li>\n<li>\n<p>GROUP BY 사용시 인덱스가 걸리는 조건</p>\n<p><strong>GROUP BY 절에 명시된 컬럼이 인덱스 컬럼의 순서와 같아야한다.</strong>\n<strong>예를들어 복합 인덱스 (a,b,c)는 group by (a,b,c) 했을때 걸립니다.</strong>\n<strong>또는 group by (a) 또는 group by (a,b) 했을때 걸립니다.</strong></p>\n</li>\n</ul>","frontmatter":{"title":"실행 계획과 쿼리 최적화","date":"January 16, 2025","update":null,"tags":["Database","Index"],"series":null},"fields":{"slug":"/database-explain-query-hint/","readingTime":{"minutes":9.82}}},"seriesList":{"edges":[{"node":{"id":"fc065a5d-53ab-5dd6-9dc4-b127396ed80f","fields":{"slug":"/java-lambda-stream/"},"frontmatter":{"title":"자바 람다(Lambda)와 스트림(Stream)"}}},{"node":{"id":"454be74c-98b2-50d6-b615-f4263c00d08c","fields":{"slug":"/java-generic/"},"frontmatter":{"title":"자바 제네릭(Generics)"}}},{"node":{"id":"64c66682-ed51-5379-89ee-2f70d12e2b57","fields":{"slug":"/java-exception-error/"},"frontmatter":{"title":"자바 에러(Error)와 예외처리(Exception)"}}},{"node":{"id":"005e9485-4c2c-5c35-b905-d3ed1b9e798f","fields":{"slug":"/java-reflection/"},"frontmatter":{"title":"자바 리플렉션(Reflection)"}}},{"node":{"id":"825cb64a-cf12-5e2e-b87c-df8b6cb230ff","fields":{"slug":"/java-try-catch/"},"frontmatter":{"title":"자바 예외 처리하기(Exception Handling)"}}},{"node":{"id":"d9372afe-4014-5507-bcbd-e38e62b29471","fields":{"slug":"/java-systemout-log/"},"frontmatter":{"title":"System.out.println()를 사용한 로깅을 피해야 하는 이유"}}},{"node":{"id":"7aa8046a-802e-536c-b5f9-e78ad5517c2f","fields":{"slug":"/java-string/"},"frontmatter":{"title":"자바 문자열(String)"}}},{"node":{"id":"5964f927-8a79-5de0-841b-8fed223ba0f9","fields":{"slug":"/java-string-stringbuffer-stringbuilder/"},"frontmatter":{"title":"String과 StringBuffer 그리고 StringBuilder"}}},{"node":{"id":"133813fe-ca42-5aa4-841f-f6bf4141d1d3","fields":{"slug":"/java-throw-chained-exception/"},"frontmatter":{"title":"throw와 throws 그리고 Chained Exception"}}},{"node":{"id":"098b32ab-5cc8-5f3a-b9ce-06c252ec53e7","fields":{"slug":"/java-thread/"},"frontmatter":{"title":"프로세스(Process)와 스레드(Thread)"}}},{"node":{"id":"4225fe9e-27ba-5b63-b8b6-7093b3c971e7","fields":{"slug":"/java-collection-framework/"},"frontmatter":{"title":"자바 컬렉션 프레임워크(Collection Framework)"}}},{"node":{"id":"990727b3-c221-5882-9668-c35326197a0b","fields":{"slug":"/java-arraylist/"},"frontmatter":{"title":"ArrayList 컬렉션"}}},{"node":{"id":"ac99cdaa-53ef-5270-b59e-c63ad05b0ba3","fields":{"slug":"/java-atomic/"},"frontmatter":{"title":"멀티 스레드 환경에서 동시성 프로그래밍"}}},{"node":{"id":"25229769-0008-5747-b590-dbc1023da764","fields":{"slug":"/java-hashmap/"},"frontmatter":{"title":"HashMap 컬렉션"}}},{"node":{"id":"a5d8aab9-4761-54fb-8033-e3e5428162ee","fields":{"slug":"/java-multi-thread/"},"frontmatter":{"title":"자바 멀티 스레딩"}}},{"node":{"id":"10e407f2-9715-504c-a60f-29a3b4cb67df","fields":{"slug":"/java-cas-aba/"},"frontmatter":{"title":"CAS(Compare-And-Swap)와 ABA 문제"}}},{"node":{"id":"9c443690-789a-5153-a234-67772da4ff2d","fields":{"slug":"/java-vector-hashtable-synchronizedxxx/"},"frontmatter":{"title":"Vector와 Hashtable 그리고 Collections.SynchronizedXXX"}}},{"node":{"id":"a642a0b6-afce-5363-a262-bccfb0f2ef20","fields":{"slug":"/java-synchroniedlist-copyonwritearraylist/"},"frontmatter":{"title":"SynchronizedList와 CopyOnWriteArrayList의 차이"}}},{"node":{"id":"01f5976a-4e46-5969-ad10-603a8b529141","fields":{"slug":"/java-concurrenthashmap-synchronizedmap/"},"frontmatter":{"title":"SynchronizedMap vs ConcurrentHashMap"}}},{"node":{"id":"479b1b49-88d0-53dd-b25f-7b05a6d4acd7","fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"title":"가비지 컬렉션(Garbage Collection)"}}},{"node":{"id":"389d424f-8a02-5fdb-8339-76124899e09c","fields":{"slug":"/java-virtual-machine/"},"frontmatter":{"title":"자바 가상 머신(Java Virtual Machine)"}}},{"node":{"id":"af409114-6f24-5568-8d8c-1553078dd692","fields":{"slug":"/java-object/"},"frontmatter":{"title":"자바 Object 클래스"}}},{"node":{"id":"e956dc3c-ab5a-5788-ab9d-e6932f21b1cd","fields":{"slug":"/java-identity-equality/"},"frontmatter":{"title":"동일성(Identity)와 동등성(Equality)"}}},{"node":{"id":"09fe0da4-1757-5eb6-90d4-18b4ba1d5d9e","fields":{"slug":"/java-primitive-reference/"},"frontmatter":{"title":"기본형(Primitive)과 참조형(Reference)"}}},{"node":{"id":"d4156b41-43d2-511a-90b3-af9d47d4739d","fields":{"slug":"/database-dbms/"},"frontmatter":{"title":"데이터베이스 관리 시스템(DBMS)"}}},{"node":{"id":"6df7f449-35cb-5e68-8d5d-80799a314831","fields":{"slug":"/database-phantom-read/"},"frontmatter":{"title":"Phantom Read와 Gap Lock, Next-Key Lock"}}},{"node":{"id":"39296236-cab8-5f64-9c3a-4216b3db11c5","fields":{"slug":"/java-immutable/"},"frontmatter":{"title":"불변 객체(Immutable Object)"}}},{"node":{"id":"3d4ae372-9791-5064-b476-2d3aca08f12e","fields":{"slug":"/java-string-optimization/"},"frontmatter":{"title":"문자열 최적화(String Optimization)"}}},{"node":{"id":"fa45f65c-d108-57f6-a1c2-e36ed09a23b2","fields":{"slug":"/java-wrapper-class/"},"frontmatter":{"title":"래퍼 클래스(Wrapper Class)"}}},{"node":{"id":"535b9757-cd58-551a-bfe8-3657aa82ea9e","fields":{"slug":"/java-class-system/"},"frontmatter":{"title":"자바 Class 클래스와 System 클래스"}}},{"node":{"id":"8d757819-398e-5dd2-89a2-58e6bba8a704","fields":{"slug":"/java-enum/"},"frontmatter":{"title":"자바 열거형 타입(Type-Safe Enum Pattern)"}}},{"node":{"id":"be250c05-5eed-50a2-835c-0f559f6dd229","fields":{"slug":"/effective-java-dependency-injection/"},"frontmatter":{"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"}}},{"node":{"id":"7ea4d566-e53f-515a-bd42-7b1298d7d6f9","fields":{"slug":"/database-data-independency/"},"frontmatter":{"title":"데이터 독립성(Data Independence)"}}},{"node":{"id":"a395659b-15d8-5494-b9ab-f10f367bd55c","fields":{"slug":"/database-rdbms/"},"frontmatter":{"title":"관계형 데이터베이스 관리 시스템(RDBMS)"}}},{"node":{"id":"2f78f287-e52a-5403-8b0e-45e8406b20f8","fields":{"slug":"/database-sql/"},"frontmatter":{"title":"SQL(Structured Query Language)"}}},{"node":{"id":"b933390c-7e98-5e83-8e61-6510f9c37a4a","fields":{"slug":"/database-architecture-caching-strategy/"},"frontmatter":{"title":"캐싱 전략(Caching Strategy)"}}},{"node":{"id":"2f2d4165-e533-5227-83dc-c78a353a5843","fields":{"slug":"/database-constraints/"},"frontmatter":{"title":"제약 조건(Constraints)"}}},{"node":{"id":"fb5cb17b-0afd-54ed-9d15-7d39a0a1e6d8","fields":{"slug":"/mysql-delete-truncate-drop/"},"frontmatter":{"title":"MySQL의 DELETE, TRUNCATE, DROP 차이"}}},{"node":{"id":"ddc7aadd-c2b4-537e-86ef-5da0a0f987ce","fields":{"slug":"/mysql-limit-offset/"},"frontmatter":{"title":"MySQL의 Pagination"}}},{"node":{"id":"afdb871b-8a87-545a-b3d3-dcbb36454b18","fields":{"slug":"/boj-2776/"},"frontmatter":{"title":"2776 암기왕"}}},{"node":{"id":"c3de373e-9923-51bb-81bf-7e7b8acb3f9c","fields":{"slug":"/boj-1654/"},"frontmatter":{"title":"1654 랜선 자르기"}}},{"node":{"id":"51225c19-1cf3-5058-8943-dc41bc0eac90","fields":{"slug":"/boj-11663/"},"frontmatter":{"title":"11663 선분 위의 점"}}},{"node":{"id":"ff01aabc-69b7-5efa-b11e-9b2c2c6007ff","fields":{"slug":"/database-explain-query-hint/"},"frontmatter":{"title":"실행 계획과 쿼리 최적화"}}},{"node":{"id":"62a5f3bd-d489-558b-8717-79b8e4bf1540","fields":{"slug":"/database-index-design/"},"frontmatter":{"title":"효율적인 인덱스 설계"}}},{"node":{"id":"287deadf-40de-5a3a-9545-342fd478f804","fields":{"slug":"/database-index/"},"frontmatter":{"title":"인덱스(Index)"}}},{"node":{"id":"5172cb65-97e3-52f1-a2ef-51935d94c748","fields":{"slug":"/boj-2343/"},"frontmatter":{"title":"2343 기타 레슨"}}},{"node":{"id":"879a45c4-b438-5e30-b986-6a4fbcf179c3","fields":{"slug":"/boj-2805/"},"frontmatter":{"title":"2805 나무 자르기"}}},{"node":{"id":"dd51ec8d-5b49-5e04-94a6-55568bb010b7","fields":{"slug":"/about/"},"frontmatter":{"title":"날 것 그대로에서의 유연함을 얻어 허슬 플레이를 하다"}}}]},"previous":{"fields":{"slug":"/boj-11663/"},"frontmatter":{"title":"11663 선분 위의 점"}},"next":{"fields":{"slug":"/database-index-design/"},"frontmatter":{"title":"효율적인 인덱스 설계"}}},"pageContext":{"id":"ff01aabc-69b7-5efa-b11e-9b2c2c6007ff","series":null,"previousPostId":"51225c19-1cf3-5058-8943-dc41bc0eac90","nextPostId":"62a5f3bd-d489-558b-8717-79b8e4bf1540"}},"staticQueryHashes":[],"slicesMap":{}}