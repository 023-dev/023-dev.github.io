{"componentChunkName":"component---src-templates-post-jsx","path":"/nginx-config/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"af6c0192-819a-5110-957c-643bdd4721be","excerpt":"왜 Nginx를 사용하는가? 먼저, Nginx를 사용하는 이유에 대해 알아보면, SSL 설정, 간단한 응답 체크나, 파일 다운로드, 반환 URL을 Proxy Pass 요구하는 경우,\n이 요청을 자바로 녹여내려면 복잡한 로직이 추가된다.\n하지만 Nginx는 이러한 설정을 간단하게 해준다.\n실제 프록시 패스를 수행할 때 Nginx를 사용하면, 있는 듯 없는 …","html":"<h2 id=\"왜-Nginx를-사용하는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-Nginx%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"왜 Nginx를 사용하는가 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>왜 Nginx를 사용하는가?</h2>\n<p>먼저, Nginx를 사용하는 이유에 대해 알아보면, SSL 설정, 간단한 응답 체크나, 파일 다운로드, 반환 URL을 Proxy Pass 요구하는 경우,\n이 요청을 자바로 녹여내려면 복잡한 로직이 추가된다.\n하지만 Nginx는 이러한 설정을 간단하게 해준다.\n실제 프록시 패스를 수행할 때 Nginx를 사용하면, 있는 듯 없는 듯한 속도 차이를 느낄 수 있다.\nNginx를 사용하면 물론 오버헤드가 발생하지만, 이는 Nginx가 주는 편리함을 생각하면 무시할 정도로 성능이 우수하다.\n이정도로 Nginx를 사용하는 이유에 대해 알아보고 이제 Nginx 설정에 대해 알아보자.</p>\n<h2 id=\"트렌디한-최신-Nginx-설치\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%A0%8C%EB%94%94%ED%95%9C-%EC%B5%9C%EC%8B%A0-Nginx-%EC%84%A4%EC%B9%98\" aria-label=\"트렌디한 최신 Nginx 설치 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>트렌디한 최신 Nginx 설치</h2>\n<p>우선, Nginx를 설치해야 한다. Nginx는 다양한 운영체제에서 사용할 수 있지만, 여기서는 Red Hat 기반 Linux를 기준으로 설명한다.\n패키지 설정할 때는 <code class=\"language-text\">sudo -u root -i</code>로 root 권한을 획득하고 진행하는게 좋다.\nRed Hat 기반 Linux 배포판에는 패키지 매니지먼트 툴인 dnf와 yum가 있다.\n여기서는 필자에게 익숙한 yum을 사용한다.\n바로 <code class=\"language-text\">yum install nginx</code>로 Nginx를 설치할 수 있지만, 기존 yum에서 지원하는 패키지 라이브러리는 하위 버전일 가능성이 있다.\n물론 개인 공부나 테스트 목적으로는 문제가 없지만, 실제 서비스에 사용하기에는 고려해봐야한다.\n아무튼 어떻게 설치해야 하냐면 방법이 꽤 있는데, 먼저 Fedora Linux에서 지원하는 <code class=\"language-text\">yum install epel-release</code>를 하면, <code class=\"language-text\">yum install nginx</code>로 Nginx를 설치하면 최신 버전일 가능성이 높아진다.\n다른 방법으로는 <a href=\"https://nginx.org/en/linux_packages.html\">Nginx yum 저장소</a>를 추가하는 방법이 있다.\n이 방법으로 할 경우 <code class=\"language-text\">vi /etc/yum.repos.d/nginx.repo</code>로 저장소를 추가하고, 아래 내용을 넣어주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>nginx-stable<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>nginx stable repo\n<span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>http://nginx.org/packages/centos/<span class=\"token variable\">$releasever</span>/<span class=\"token variable\">$basearch</span>/\n<span class=\"token assign-left variable\">gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">enabled</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">gpgkey</span><span class=\"token operator\">=</span>https://nginx.org/keys/nginx_signing.key\n<span class=\"token assign-left variable\">module_hotfixes</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>이렇게 저장소를 추가하고 <code class=\"language-text\">yum install nginx</code>로 Nginx를 설치하면 위 설정을 참고해서 최신 버전으로 설치한다.</p>\n<h2 id=\"Nginx-설정\" style=\"position:relative;\"><a href=\"#Nginx-%EC%84%A4%EC%A0%95\" aria-label=\"Nginx 설정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Nginx 설정</h2>\n<p>이제 Nginx를 설치했으니, Nginx를 다루는 방법에 대해 알아보자.</p>\n<h3 id=\"Nginx의-설정-파일\" style=\"position:relative;\"><a href=\"#Nginx%EC%9D%98-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"Nginx의 설정 파일 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Nginx의 설정 파일</h3>\n<p>먼저 Nginx 설정 파일에 대해 이해가 필요한데 꽤 복잡하다.\nNginx 설정 파일을 알아보자면, 우선 경로는 <code class=\"language-text\">/etc/nginx</code>에 있다.</p>\n<ul>\n<li>mime.types: Nginx 서버가 처리할 MIME 타입 목록</li>\n<li>upstream.conf: 로드밸런싱 사용을 위한 여러 서버 그룹을 정의한 설정 파일</li>\n<li>header.conf: 요청을 다른 서버로 프록시할 때 전달할 헤더 설정 파일</li>\n<li>ssl.conf: SSL 설정 파일, SSL 인증서 경로 지정</li>\n<li>ssl-server.conf: SSL 요청(443 포트)에 대한 서버 블록 설정 파일</li>\n<li>http-server.conf: HTTP 요청(80 포트)에 대한 서버 블록 설정 파일</li>\n<li>nginx.conf: 모든 설정 파일을 포함하는 Nginx의 메인 설정 파일</li>\n</ul>\n<h4 id=\"mimetypes\" style=\"position:relative;\"><a href=\"#mimetypes\" aria-label=\"mimetypes permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>mime.types</h4>\n<p>mime.types 파일은 Nginx가 처리할 수 있는 파일 형식(MIME 타입)을 정의한다.\n기본적으로 HTML, CSS, 이미지 파일, JavaScript 등 여러 파일 형식에 대한 MIME 타입을 지정하고 있다.\n전체 파일 형식은 <a href=\"https://hg.nginx.org/nginx/file/tip/conf/mime.types\">Nginx mime.types</a>에서 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">types <span class=\"token punctuation\">{</span>\n    text/html                                        html htm shtml<span class=\"token punctuation\">;</span>\n    text/css                                         css<span class=\"token punctuation\">;</span>\n    text/xml                                         xml<span class=\"token punctuation\">;</span>\n    image/gif                                        gif<span class=\"token punctuation\">;</span>\n    image/jpeg                                       jpeg jpg<span class=\"token punctuation\">;</span>\n    application/javascript                           js<span class=\"token punctuation\">;</span>\n    application/atom+xml                             atom<span class=\"token punctuation\">;</span>\n    application/rss+xml                              rss<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"upstreamconf\" style=\"position:relative;\"><a href=\"#upstreamconf\" aria-label=\"upstreamconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>upstream.conf</h4>\n<p>Nginx가 요청을 전달할 서버 그룹을 정의하는 파일이다.\n<code class=\"language-text\">upstream</code> 지시어를 사용하여 여러 백엔드 서버를 묶어 로드 밸런싱을 할 수 있고, <code class=\"language-text\">keepalive</code>를 사용하여 연결을 재활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># upstream -> backend server group </span>\n<span class=\"token comment\"># keepalive -> upstream connection pool</span>\n  \nupstream tomcat <span class=\"token punctuation\">{</span>\n    server <span class=\"token number\">127.0</span>.0.1:8080<span class=\"token punctuation\">;</span>\n    keepalive <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nupstream jp1 <span class=\"token punctuation\">{</span>\n    server jp1.com<span class=\"token punctuation\">;</span>\n    keepalive <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"headerconf\" style=\"position:relative;\"><a href=\"#headerconf\" aria-label=\"headerconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>header.conf</h4>\n<p>요청을 다른 서버로 프록시할 때, 전달할 헤더 설정을 정의하는 파일이다.\nNginx는 기본적으로 Host 헤더를 전달하는데, 이때 필요에 따라 추가적인 헤더를 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">proxy_pass_header Server<span class=\"token punctuation\">;</span>                <span class=\"token comment\"># Server 헤더를 프록시할 때 전달</span>\nproxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\"># Host 헤더를 전달</span>\nproxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 클라이언트 IP 주소를 전달</span></code></pre></div>\n<h4 id=\"sslconf\" style=\"position:relative;\"><a href=\"#sslconf\" aria-label=\"sslconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>ssl.conf</h4>\n<p>SSL 설정 파일로, SSL 인증서와 키 파일의 경로를 지정하고 SSL 버전 및 암호화 설정을 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">listen <span class=\"token number\">443</span> ssl http2<span class=\"token punctuation\">;</span>\n\nssl_certificate       ./ssl/cert.pem<span class=\"token punctuation\">;</span>\nssl_certificate_key   ./ssl/key.pem<span class=\"token punctuation\">;</span>\n\nssl_protocols  TLSv1.2 TLSv1.3<span class=\"token punctuation\">;</span>\nssl_ciphers    AES128:RC4:AES256:<span class=\"token operator\">!</span>ADH:<span class=\"token operator\">!</span>aNULL:<span class=\"token operator\">!</span>DH:<span class=\"token operator\">!</span>EDH:<span class=\"token operator\">!</span>eNULL:<span class=\"token operator\">!</span>LOW:<span class=\"token operator\">!</span>SSLv2:<span class=\"token operator\">!</span>EXP:<span class=\"token operator\">!</span>NULL<span class=\"token punctuation\">;</span>\nssl_prefer_server_ciphers   on<span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"ssl-serverconf\" style=\"position:relative;\"><a href=\"#ssl-serverconf\" aria-label=\"ssl serverconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>ssl-server.conf</h4>\n<p>HTTPS(443 포트) 요청을 처리하는 서버 블록을 정의한다.\nSSL 설정 파일을 포함시키고, 도메인과 관련된 로그 및 오류 로그를 설정하고, 특정 경로(/actuator)로의 접근을 제한하거나, 다른 서버로의 프록시를 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># https 443 요청에 대한 proxy pass</span>\nserver <span class=\"token punctuation\">{</span>\n    listen       <span class=\"token number\">443</span> ssl http2<span class=\"token punctuation\">;</span>  \t           \n    server_name github.023-dev.com 023-dev.github.io<span class=\"token punctuation\">;</span>\n    access_log  ./logs/nginx/access_023.log  main<span class=\"token punctuation\">;</span>     <span class=\"token comment\"># HTTPS 로그 기록</span>\n\n    ssl_certificate       ./ssl/cert.pem<span class=\"token punctuation\">;</span>\n    ssl_certificate_key   ./ssl/key.pem<span class=\"token punctuation\">;</span>\n\n    ssl_protocols  TLSv1.2 TLSv1.3<span class=\"token punctuation\">;</span>\n    ssl_ciphers    AES128:RC4:AES256:<span class=\"token operator\">!</span>ADH:<span class=\"token operator\">!</span>aNULL:<span class=\"token operator\">!</span>DH:<span class=\"token operator\">!</span>EDH:<span class=\"token operator\">!</span>eNULL:<span class=\"token operator\">!</span>LOW:<span class=\"token operator\">!</span>SSLv2:<span class=\"token operator\">!</span>EXP:<span class=\"token operator\">!</span>NULL<span class=\"token punctuation\">;</span>\n    ssl_prefer_server_ciphers   on<span class=\"token punctuation\">;</span>\n\n    location ^~ /actuator <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 보안상 외부에서 /actuator 경로에 접근을 차단</span>\n    <span class=\"token punctuation\">}</span>\n\n    location / <span class=\"token punctuation\">{</span>\n        proxy_pass http://tomcat<span class=\"token punctuation\">;</span> <span class=\"token comment\"># / 경로로 들어온 요청을 tomcat 서버로 프록시</span>\n        proxy_set_header Host <span class=\"token variable\">$http_host</span><span class=\"token punctuation\">;</span>\n        proxy_set_header X-Real-IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    error_page <span class=\"token number\">400</span> <span class=\"token number\">401</span> <span class=\"token number\">403</span> <span class=\"token number\">404</span> <span class=\"token number\">405</span> /404.html<span class=\"token punctuation\">;</span>\n    location <span class=\"token operator\">=</span> /404.html <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    \n    error_page <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> /50x.html<span class=\"token punctuation\">;</span>\n   \t\tlocation <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">{</span>\n   \t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"http-serverconf\" style=\"position:relative;\"><a href=\"#http-serverconf\" aria-label=\"http serverconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>http-server.conf</h4>\n<p>HTTP(80 포트) 요청을 처리하는 서버 블록을 정의한다.\n이 파일에서는 SSL이 아닌 일반 HTTP 요청을 처리하고, 특정 경로(/api)에 대해 HTTPS로 리디렉션하는 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># http 80 요청에 따른 proxy pass</span>\nserver <span class=\"token punctuation\">{</span>\n    listen       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>  \t           \n    server_name github.023-dev.com 023-dev.github.io<span class=\"token punctuation\">;</span>\n    access_log  ./logs/nginx/access_023.log  main<span class=\"token punctuation\">;</span>     <span class=\"token comment\"># HTTP 로그 기록</span>\n\n    location ^~ /actuator <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 보안상 외부에서 /actuator 경로에 접근을 차단</span>\n    <span class=\"token punctuation\">}</span>\n\n    location ~* ^/<span class=\"token punctuation\">(</span>api/<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rewrite ^<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span> https://<span class=\"token variable\">$http_host</span><span class=\"token variable\">$1</span> permanent<span class=\"token punctuation\">;</span> <span class=\"token comment\"># /api 경로를 HTTPS로 리디렉션</span>\n    <span class=\"token punctuation\">}</span>\n\n    location / <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 그 외의 경로로 접근한 경우, 404 반환</span>\n        <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    error_page <span class=\"token number\">400</span> <span class=\"token number\">401</span> <span class=\"token number\">403</span> <span class=\"token number\">404</span> <span class=\"token number\">405</span> /404.html<span class=\"token punctuation\">;</span>\n    location <span class=\"token operator\">=</span> /404.html <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    \n    error_page <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> /50x.html<span class=\"token punctuation\">;</span>\n   \t\tlocation <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">{</span>\n   \t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"nginxconf\" style=\"position:relative;\"><a href=\"#nginxconf\" aria-label=\"nginxconf permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>nginx.conf</h4>\n<p>Nginx의 메인 설정 파일로, 다른 설정 파일들을 <code class=\"language-text\">include</code>하여 불러온다.\n이 파일에서는 시스템의 CPU 코어 수에 맞게 <code class=\"language-text\">worker_processes</code>를 설정하고, 요청 처리에 필요한 다양한 설정들을 포함시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">user  nginx<span class=\"token punctuation\">;</span>\n  \nworker_processes auto<span class=\"token punctuation\">;</span> <span class=\"token comment\"># CPU 코어 수에 맞게 worker_processes 설정</span>\n\nevents <span class=\"token punctuation\">{</span>\n    worker_connections <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># worker_connections 설정 -> process당 maximum connection 수</span>\n<span class=\"token punctuation\">}</span>\n\nhttp <span class=\"token punctuation\">{</span>\n    include       mime.types<span class=\"token punctuation\">;</span>               <span class=\"token comment\"># MIME 타입 설정 파일</span>\n    default_type  application/octet-stream<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 기본 MIME 타입 설정</span>\n\n    include       upstream.conf<span class=\"token punctuation\">;</span>            <span class=\"token comment\"># upstream 설정 파일</span>\n    include       header.conf<span class=\"token punctuation\">;</span>              <span class=\"token comment\"># header 설정 파일</span>\n    include       ssl.conf<span class=\"token punctuation\">;</span>                 <span class=\"token comment\"># SSL 설정 파일</span>\n    include       ssl-server.conf<span class=\"token punctuation\">;</span>          <span class=\"token comment\"># HTTPS 서버 블록 설정 파일</span>\n    include       http-server.conf<span class=\"token punctuation\">;</span>         <span class=\"token comment\"># HTTP 서버 블록 설정 파일</span>\n\n    sendfile        on<span class=\"token punctuation\">;</span>                      <span class=\"token comment\"># sendfile 설정</span>\n    tcp_nopush     on<span class=\"token punctuation\">;</span>                      <span class=\"token comment\"># tcp_nopush 설정</span>\n    \n    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\"># keepalive_timeout -> 클라이언트와 서버 사이의 연결 유지 시간</span>\n    keepalive_requests <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\"># keepalive_requests -> keepalive 연결 요청 수</span>\n    \n    <span class=\"token function\">gzip</span>  on<span class=\"token punctuation\">;</span>                               <span class=\"token comment\"># gzip 압축 설정</span>\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript<span class=\"token punctuation\">;</span>\n    \n    large_client_header_buffers <span class=\"token number\">4</span> 16k<span class=\"token punctuation\">;</span>      <span class=\"token comment\"># large_client_header_buffers 설정 -> 클라이언트 헤더 버퍼 크기</span>\n    client_max_body_size 100m<span class=\"token punctuation\">;</span>              <span class=\"token comment\"># client_max_body_size 설정 -> 클라이언트 요청 바디 최대 크기</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"Nginx-설정-파일-예시\" style=\"position:relative;\"><a href=\"#Nginx-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC-%EC%98%88%EC%8B%9C\" aria-label=\"Nginx 설정 파일 예시 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Nginx 설정 파일 예시</h3>\n<p>최근에 사용한 Nginx 설정 파일에 형식을 공유하겠다.\n이렇게만 해도 일반적인 어플리케이션 서버를 운영하는데 충분하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">upstream backend <span class=\"token punctuation\">{</span>#연결했던 커넥션을 nginx가 캐시해서 재활용 할 수 있음\n\t\t\t\tserver <span class=\"token number\">127.0</span>.0.1:8080<span class=\"token punctuation\">;</span><span class=\"token comment\"># 같은 서버에 있어서 local로 매핑</span>\n\t\t\t\tkeepalive <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nserver <span class=\"token punctuation\">{</span>\n        listen: <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#default_server 붙이는 방법도 있음</span>\n        server_name: <span class=\"token punctuation\">{</span>탄력적 IP or DNS<span class=\"token punctuation\">}</span> <span class=\"token comment\"># ex) 43.200.98.236;</span>\n        \n        <span class=\"token comment\">#location /hello { # 이렇게 할 수도 있음</span>\n        <span class=\"token comment\">#        return 200 'Hello World';</span>\n        <span class=\"token comment\">#        add_header Content-Type \"text/plain\";</span>\n        <span class=\"token comment\">#}</span>\n        \n        location / <span class=\"token punctuation\">{</span>\n\t\t\t\t        proxy_pass http://backend<span class=\"token punctuation\">;</span> \n\t\t\t\t        proxy_connect_timeout <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t\t\t        proxy_read_timeout <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성 후 <code class=\"language-text\">nginx -t</code>로 설정 파일을 검사하고 <code class=\"language-text\">nginx -s reload</code>로 설정을 적용할 수 있다.\n<code class=\"language-text\">nginx -t</code>를 통해 검사하는 것을 습관화 하는 것이 좋다.</p>\n<h2 id=\"Nginx-설정-시-주의해야-하는-부분\" style=\"position:relative;\"><a href=\"#Nginx-%EC%84%A4%EC%A0%95-%EC%8B%9C-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EB%B6%80%EB%B6%84\" aria-label=\"Nginx 설정 시 주의해야 하는 부분 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Nginx 설정 시 주의해야 하는 부분</h2>\n<p>Nginx 설정 시 주의해야 하는 부분 또한 꽤 있다.\n주의하길 바란다.</p>\n<h3 id=\"server_name\" style=\"position:relative;\"><a href=\"#server_name\" aria-label=\"server_name permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>server_name</h3>\n<p>Nginx는 요청이 들어오면 어떤 서버 블록이 해당 요청을 처리할지 결정하는데, 이 때 중요한 역할을 하는 것이 바로 <code class=\"language-text\">server_name</code>이다.\n여러 개의 서버 블록이 동일한 포트를 리슨하고 있을 때, 요청은 <code class=\"language-text\">server_name</code>에 설정된 값을 기준으로 적합한 서버 블록으로 라우팅된다.\n예를 들어, 80번 포트를 리슨하는 3개의 서버 블록이 있을 경우, 각 서버 블록은 <code class=\"language-text\">server_name</code>에 설정된 값에 따라 다르게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name example.com www.example.com<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span>\n\nserver <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name example.net www.example.net<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span>\n\nserver <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name example.org www.example.org<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같은 설정에서는, Nginx가 요청을 처리할 때 요청 헤더의 Host 값을 바탕으로 서버를 선택한다.\n만약 <code class=\"language-text\">server_name</code>에 설정된 도메인 이름이 매칭되지 않으면, <code class=\"language-text\">default_server</code>로 설정된 서버 블록이 요청을 처리하게 된다.\n특히, Host 헤더가 없는 요청을 처리하려면 아래와 같이 설정하여 444 상태 코드를 반환해 요청을 drop 시킬 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span> default_server<span class=\"token punctuation\">;</span>\n    server_name _<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">444</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하나의 서버에 여러 DNS가 매핑되는 상황에서 설정하다 보면 원하지 원하지 않는 서버 블록이 요청을 처리할 수 있다.\n이러한 경우에는 원하는 <code class=\"language-text\">server_name</code>이 올바르게 매핑되고 있는지 확인하고 잘 설정해야 한다.</p>\n<h3 id=\"proxy_set_header\" style=\"position:relative;\"><a href=\"#proxy_set_header\" aria-label=\"proxy_set_header permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>proxy_set_header</h3>\n<p>Nginx에서 <code class=\"language-text\">proxy_pass</code>를 사용하여 다른 서버로 요청을 전달할 때, 특정 헤더를 전달하기 위해 <code class=\"language-text\">proxy_set_header</code>를 설정할 수 있다.\n기본적으로 <code class=\"language-text\">proxy_set_header</code>는 상위 블록에서 설정된 값을 하위 블록에서 상속받는데, 예를 들어 http 또는 server 블록에서 정의된 <code class=\"language-text\">proxy_set_header</code>는 location 블록에서도 적용이 된다.\n그러나 location 블록에서 별도의 proxy_set_header 설정이 있다면, 상위 블록에서 정의된 설정은 무시되고 하위 블록에서 설정된 값만 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name localhost<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 상위 블록에서 설정된 \"Hello\" 헤더</span>\n    proxy_set_header Hello <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    \n    location / <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># 하위 블록에서 설정된 \"Bye\" 헤더</span>\n        proxy_set_header Bye <span class=\"token string\">\"Bye\"</span><span class=\"token punctuation\">;</span>\n        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우, 하위 블록인 <code class=\"language-text\">location</code>에서 설정된 <code class=\"language-text\">proxy_set_header</code>가 상위 블록의 설정을 덮어쓰기 때문에 <code class=\"language-text\">proxy_pass</code>로 전달되는 헤더는 \"Bye\" 만 전달된다.\n따라서 <code class=\"language-text\">proxy_set_header</code>를 설정할 때, 상위 블록과 하위 블록에서 충돌이 일어나지 않도록 주의해야 한다.</p>\n<h2 id=\"Nginx-로그\" style=\"position:relative;\"><a href=\"#Nginx-%EB%A1%9C%EA%B7%B8\" aria-label=\"Nginx 로그 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>Nginx 로그</h2>\n<p>서버 운영을 하게 되면 로그는 필수이다.\nNginx에도 로그가 있는데, Nginx 로그는 크게 두 가지로 나뉜다.</p>\n<ul>\n<li>error.log: Nginx 서버에서 발생한 오류에 대한 로그</li>\n<li>access.log: 클라이언트 요청에 대한 로그</li>\n</ul>\n<p>이 로그는 <code class=\"language-text\">vi /etc/nginx/nginx.conf</code> Nginx 설정 파일에 기본 <code class=\"language-text\">log_format</code>으로 있다.\n기본 <code class=\"language-text\">log_format</code>은 이렇게 돼있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">log_format main <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n                 <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span>\n                 <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이는 경우에 따라서 서비스 마다 <code class=\"language-text\">config</code> 파일을 만들어 <code class=\"language-text\">log</code> 관리를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http <span class=\"token punctuation\">{</span>\n\t\tlog_format main <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"token string\">'\"$request_time\" \"$upsteam_connect_time\" \"$upstream_header_time\" \"$upstream_response_time\"'</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t\t\t\n\t\taccess_log /var/log/nginx/access.log main<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">$request_time</code>, <code class=\"language-text\">$upsteam_connect_time</code>, <code class=\"language-text\">$upstream_header_time</code>, <code class=\"language-text\">$upstream_response_time</code>은 Nginx에서 제공하는 변수로, 각각 요청 처리 시간, 서버 연결 시간, 서버 응답 헤더 수신 시간, 서버 응답 시간을 의미한다.\n필요로 한다면, 다른 로그 매니지먼트 툴에서 로그 파싱을 위해 json 형식으로 지정하여 사용할 수 있다.\n이제 이렇게 설정한 로그를 <code class=\"language-text\">nginx.conf</code>에 적용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">..</span>.\n        \n        access_log /var/log/nginx/<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-access.log main<span class=\"token punctuation\">;</span><span class=\"token comment\"># ex) app-access.log, log_format 지정 가능(ex. main)</span>\n        error_log /var/log/nginx/<span class=\"token punctuation\">{</span>application<span class=\"token punctuation\">}</span>-error.log<span class=\"token punctuation\">;</span><span class=\"token comment\"># ex) app-error.log</span>\n        \n        <span class=\"token punctuation\">..</span>.       \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>참고</h2>\n<ul>\n<li>\n<p><a href=\"https://nginx.org/en/linux_packages.html\">Nginx: Linux packages</a></p>\n</li>\n<li>\n<p><a href=\"https://hg.nginx.org/nginx/file/tip/conf/mime.types\">Kandaurov, S. (2025, February 5). Nginx-1.27.4-RELEASE.</a></p>\n</li>\n</ul>","frontmatter":{"title":"Nginx 설정하기","date":"July 17, 2024","update":null,"tags":["Nginx"],"series":null},"fields":{"slug":"/nginx-config/","readingTime":{"minutes":15.04}}},"seriesList":{"edges":[{"node":{"id":"ebf552bc-59ea-5969-b86b-bad95404ee87","fields":{"slug":"/ssl-protocol/"},"frontmatter":{"title":"SSL Protocol"}}},{"node":{"id":"af6c0192-819a-5110-957c-643bdd4721be","fields":{"slug":"/nginx-config/"},"frontmatter":{"title":"Nginx 설정하기"}}},{"node":{"id":"07aa966e-666d-563f-85c8-b3b4ad26865d","fields":{"slug":"/git-conventions/"},"frontmatter":{"title":"협업을 위한 Git 컨벤션"}}},{"node":{"id":"e4531ca2-2ac9-531b-9164-8b64c75e5a19","fields":{"slug":"/interview/"},"frontmatter":{"title":"면접관 사로잡기"}}},{"node":{"id":"9b20fef2-3067-501e-bf1c-8496cd150398","fields":{"slug":"/spring-data-jpa-paging/"},"frontmatter":{"title":"Spring Data JPA의 Slice & Page"}}},{"node":{"id":"454be74c-98b2-50d6-b615-f4263c00d08c","fields":{"slug":"/java-generic/"},"frontmatter":{"title":"자바 제네릭(Generics)"}}},{"node":{"id":"fc065a5d-53ab-5dd6-9dc4-b127396ed80f","fields":{"slug":"/java-lambda-stream/"},"frontmatter":{"title":"자바 람다(Lambda)와 스트림(Stream)"}}},{"node":{"id":"64c66682-ed51-5379-89ee-2f70d12e2b57","fields":{"slug":"/java-exception-error/"},"frontmatter":{"title":"자바 에러(Error)와 예외처리(Exception)"}}},{"node":{"id":"825cb64a-cf12-5e2e-b87c-df8b6cb230ff","fields":{"slug":"/java-try-catch/"},"frontmatter":{"title":"자바 예외 처리하기(Exception Handling)"}}},{"node":{"id":"d9372afe-4014-5507-bcbd-e38e62b29471","fields":{"slug":"/java-systemout-log/"},"frontmatter":{"title":"System.out.println()를 사용한 로깅을 피해야 하는 이유"}}},{"node":{"id":"7aa8046a-802e-536c-b5f9-e78ad5517c2f","fields":{"slug":"/java-string/"},"frontmatter":{"title":"자바 문자열(String)"}}},{"node":{"id":"005e9485-4c2c-5c35-b905-d3ed1b9e798f","fields":{"slug":"/java-reflection/"},"frontmatter":{"title":"자바 리플렉션(Reflection)"}}},{"node":{"id":"5964f927-8a79-5de0-841b-8fed223ba0f9","fields":{"slug":"/java-string-stringbuffer-stringbuilder/"},"frontmatter":{"title":"String과 StringBuffer 그리고 StringBuilder"}}},{"node":{"id":"133813fe-ca42-5aa4-841f-f6bf4141d1d3","fields":{"slug":"/java-throw-chained-exception/"},"frontmatter":{"title":"throw와 throws 그리고 Chained Exception"}}},{"node":{"id":"098b32ab-5cc8-5f3a-b9ce-06c252ec53e7","fields":{"slug":"/java-thread/"},"frontmatter":{"title":"프로세스(Process)와 스레드(Thread)"}}},{"node":{"id":"4225fe9e-27ba-5b63-b8b6-7093b3c971e7","fields":{"slug":"/java-collection-framework/"},"frontmatter":{"title":"자바 컬렉션 프레임워크(Collection Framework)"}}},{"node":{"id":"990727b3-c221-5882-9668-c35326197a0b","fields":{"slug":"/java-arraylist/"},"frontmatter":{"title":"ArrayList 컬렉션"}}},{"node":{"id":"ac99cdaa-53ef-5270-b59e-c63ad05b0ba3","fields":{"slug":"/java-atomic/"},"frontmatter":{"title":"멀티 스레드 환경에서 동시성 프로그래밍"}}},{"node":{"id":"25229769-0008-5747-b590-dbc1023da764","fields":{"slug":"/java-hashmap/"},"frontmatter":{"title":"HashMap 컬렉션"}}},{"node":{"id":"a5d8aab9-4761-54fb-8033-e3e5428162ee","fields":{"slug":"/java-multi-thread/"},"frontmatter":{"title":"자바 멀티 스레딩"}}},{"node":{"id":"10e407f2-9715-504c-a60f-29a3b4cb67df","fields":{"slug":"/java-cas-aba/"},"frontmatter":{"title":"CAS(Compare-And-Swap)와 ABA 문제"}}},{"node":{"id":"9c443690-789a-5153-a234-67772da4ff2d","fields":{"slug":"/java-vector-hashtable-synchronizedxxx/"},"frontmatter":{"title":"Vector와 Hashtable 그리고 Collections.SynchronizedXXX"}}},{"node":{"id":"a642a0b6-afce-5363-a262-bccfb0f2ef20","fields":{"slug":"/java-synchroniedlist-copyonwritearraylist/"},"frontmatter":{"title":"SynchronizedList와 CopyOnWriteArrayList의 차이"}}},{"node":{"id":"01f5976a-4e46-5969-ad10-603a8b529141","fields":{"slug":"/java-concurrenthashmap-synchronizedmap/"},"frontmatter":{"title":"SynchronizedMap vs ConcurrentHashMap"}}},{"node":{"id":"479b1b49-88d0-53dd-b25f-7b05a6d4acd7","fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"title":"가비지 컬렉션(Garbage Collection)"}}},{"node":{"id":"389d424f-8a02-5fdb-8339-76124899e09c","fields":{"slug":"/java-virtual-machine/"},"frontmatter":{"title":"자바 가상 머신(Java Virtual Machine)"}}},{"node":{"id":"af409114-6f24-5568-8d8c-1553078dd692","fields":{"slug":"/java-object/"},"frontmatter":{"title":"자바 Object 클래스"}}},{"node":{"id":"e956dc3c-ab5a-5788-ab9d-e6932f21b1cd","fields":{"slug":"/java-identity-equality/"},"frontmatter":{"title":"동일성(Identity)와 동등성(Equality)"}}},{"node":{"id":"09fe0da4-1757-5eb6-90d4-18b4ba1d5d9e","fields":{"slug":"/java-primitive-reference/"},"frontmatter":{"title":"기본형(Primitive)과 참조형(Reference)"}}},{"node":{"id":"6df7f449-35cb-5e68-8d5d-80799a314831","fields":{"slug":"/database-phantom-read/"},"frontmatter":{"title":"Phantom Read와 Gap Lock, Next-Key Lock"}}},{"node":{"id":"d4156b41-43d2-511a-90b3-af9d47d4739d","fields":{"slug":"/database-dbms/"},"frontmatter":{"title":"데이터베이스 관리 시스템(DBMS)"}}},{"node":{"id":"39296236-cab8-5f64-9c3a-4216b3db11c5","fields":{"slug":"/java-immutable/"},"frontmatter":{"title":"불변 객체(Immutable Object)"}}},{"node":{"id":"3d4ae372-9791-5064-b476-2d3aca08f12e","fields":{"slug":"/java-string-optimization/"},"frontmatter":{"title":"문자열 최적화(String Optimization)"}}},{"node":{"id":"fa45f65c-d108-57f6-a1c2-e36ed09a23b2","fields":{"slug":"/java-wrapper-class/"},"frontmatter":{"title":"래퍼 클래스(Wrapper Class)"}}},{"node":{"id":"535b9757-cd58-551a-bfe8-3657aa82ea9e","fields":{"slug":"/java-class-system/"},"frontmatter":{"title":"자바 Class 클래스와 System 클래스"}}},{"node":{"id":"8d757819-398e-5dd2-89a2-58e6bba8a704","fields":{"slug":"/java-enum/"},"frontmatter":{"title":"자바 열거형 타입(Type-Safe Enum Pattern)"}}},{"node":{"id":"7ea4d566-e53f-515a-bd42-7b1298d7d6f9","fields":{"slug":"/database-data-independency/"},"frontmatter":{"title":"데이터 독립성(Data Independence)"}}},{"node":{"id":"a395659b-15d8-5494-b9ab-f10f367bd55c","fields":{"slug":"/database-rdbms/"},"frontmatter":{"title":"관계형 데이터베이스 관리 시스템(RDBMS)"}}},{"node":{"id":"2f78f287-e52a-5403-8b0e-45e8406b20f8","fields":{"slug":"/database-sql/"},"frontmatter":{"title":"SQL(Structured Query Language)"}}},{"node":{"id":"b933390c-7e98-5e83-8e61-6510f9c37a4a","fields":{"slug":"/database-architecture-caching-strategy/"},"frontmatter":{"title":"캐싱 전략(Caching Strategy)"}}},{"node":{"id":"2f2d4165-e533-5227-83dc-c78a353a5843","fields":{"slug":"/database-constraints/"},"frontmatter":{"title":"제약 조건(Constraints)"}}},{"node":{"id":"fb5cb17b-0afd-54ed-9d15-7d39a0a1e6d8","fields":{"slug":"/mysql-delete-truncate-drop/"},"frontmatter":{"title":"MySQL의 DELETE, TRUNCATE, DROP 차이"}}},{"node":{"id":"ddc7aadd-c2b4-537e-86ef-5da0a0f987ce","fields":{"slug":"/mysql-limit-offset/"},"frontmatter":{"title":"MySQL의 Pagination"}}},{"node":{"id":"afdb871b-8a87-545a-b3d3-dcbb36454b18","fields":{"slug":"/boj-2776/"},"frontmatter":{"title":"2776 암기왕"}}},{"node":{"id":"c3de373e-9923-51bb-81bf-7e7b8acb3f9c","fields":{"slug":"/boj-1654/"},"frontmatter":{"title":"1654 랜선 자르기"}}},{"node":{"id":"d79c2dea-56e4-5f4e-ba34-3cb949e9c362","fields":{"slug":"/boj-2512/"},"frontmatter":{"title":"2512 예산"}}},{"node":{"id":"51225c19-1cf3-5058-8943-dc41bc0eac90","fields":{"slug":"/boj-11663/"},"frontmatter":{"title":"11663 선분 위의 점"}}},{"node":{"id":"287deadf-40de-5a3a-9545-342fd478f804","fields":{"slug":"/database-index/"},"frontmatter":{"title":"인덱스(Index)"}}},{"node":{"id":"ff01aabc-69b7-5efa-b11e-9b2c2c6007ff","fields":{"slug":"/database-explain-query-hint/"},"frontmatter":{"title":"실행 계획과 쿼리 최적화"}}},{"node":{"id":"879a45c4-b438-5e30-b986-6a4fbcf179c3","fields":{"slug":"/boj-2805/"},"frontmatter":{"title":"2805 나무 자르기"}}},{"node":{"id":"c553b71b-99ee-54e4-99c1-28158b54878a","fields":{"slug":"/database-storage-and-random-sequantial-io/"},"frontmatter":{"title":"저장 매체와 랜덤 I/O, 순차 I/O"}}},{"node":{"id":"5172cb65-97e3-52f1-a2ef-51935d94c748","fields":{"slug":"/boj-2343/"},"frontmatter":{"title":"2343 기타 레슨"}}},{"node":{"id":"7fed17e5-3250-5f81-b864-7f719203a651","fields":{"slug":"/database-ssd-faster-than-hdd/"},"frontmatter":{"title":"SSD를 사용하면 DBMS가 빨라질까?"}}},{"node":{"id":"b8479007-2406-5b98-a027-2437a5c27be6","fields":{"slug":"/boj-2470/"},"frontmatter":{"title":"2470 두 용액"}}},{"node":{"id":"0192b957-d4c7-5ef9-bb0d-bd44452e72ad","fields":{"slug":"/boj-2110/"},"frontmatter":{"title":"2110 공유기 설치"}}},{"node":{"id":"2840da70-822e-5706-bd49-bcef59e88efd","fields":{"slug":"/boj-1260/"},"frontmatter":{"title":"1260 DFS와 BFS"}}},{"node":{"id":"c58dd773-ac71-5951-8381-989f6a01b642","fields":{"slug":"/prog-immigration/"},"frontmatter":{"title":"프로그래머스 입국심사"}}},{"node":{"id":"c37121f6-1974-5663-94a2-f840c17b21cb","fields":{"slug":"/boj-3079/"},"frontmatter":{"title":"3079 입국심사"}}},{"node":{"id":"8f131117-8e43-550c-a9c2-f426134f7559","fields":{"slug":"/boj-1697/"},"frontmatter":{"title":"1697 숨바꼭질"}}},{"node":{"id":"5e43441d-65a2-5400-aa7e-08adda263e4a","fields":{"slug":"/boj-2667/"},"frontmatter":{"title":"2667 단지번호붙이기"}}},{"node":{"id":"5323ab88-9e67-5d24-bb72-ad4c2137a0ea","fields":{"slug":"/datavase-normalization/"},"frontmatter":{"title":"데이터베이스 정규화(Normalization)"}}},{"node":{"id":"fd4f64da-5d81-5f7a-9375-5118fd1b6c47","fields":{"slug":"/boj-1707/"},"frontmatter":{"title":"1707 이분 그래프"}}},{"node":{"id":"49a050bd-e29b-5ad5-a873-ad7900d76bbc","fields":{"slug":"/boj-2573/"},"frontmatter":{"title":"2573 빙산"}}},{"node":{"id":"7d0e1c93-56d9-556d-8ed7-7920e7470762","fields":{"slug":"/boj-12425/"},"frontmatter":{"title":"12425 윷놀이 (Small)"}}},{"node":{"id":"ef88654c-22d3-5af6-b232-ac40429fadd5","fields":{"slug":"/database-index-sql/"},"frontmatter":{"title":"인덱스만 사용하면 성능이 향상될까?"}}},{"node":{"id":"97279d93-b018-5291-a7f8-154ab9af9e06","fields":{"slug":"/database-transaction/"},"frontmatter":{"title":"DBMS는 트랜잭션을 어떻게 관리할까?"}}},{"node":{"id":"556e4443-760f-5c0e-9d3f-56bce92db6bf","fields":{"slug":"/database-isolation-level/"},"frontmatter":{"title":"트랜잭션의 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"6bb66c2b-026f-566d-84fb-df3ce4dbec95","fields":{"slug":"/boj-17825/"},"frontmatter":{"title":"17825 주사위 윳놀이"}}},{"node":{"id":"0e31350d-6754-56b2-85a5-d739d57c38af","fields":{"slug":"/jscode-study-memoir/"},"frontmatter":{"title":"JSCODE 스터디 되돌아보기"}}},{"node":{"id":"a69e3d86-fa3b-5b23-a46b-27ca07dc31cc","fields":{"slug":"/boj-1325/"},"frontmatter":{"title":"1325 효율적인 해킹"}}},{"node":{"id":"07d0b3a0-20f5-5418-87e3-6e5eff4cbd0a","fields":{"slug":"/boj-1018/"},"frontmatter":{"title":"1018 체스판 다시 칠하기"}}},{"node":{"id":"9dde491d-5904-5c61-84e7-7943094943bd","fields":{"slug":"/boj-1051/"},"frontmatter":{"title":"1051 숫자 정사각형"}}},{"node":{"id":"a563c631-3d22-5595-9063-749fc5553ad3","fields":{"slug":"/boj-2529/"},"frontmatter":{"title":"2529 부등호"}}},{"node":{"id":"b9ebae0f-eb1d-5b1e-890b-1af660585100","fields":{"slug":"/boj-2615/"},"frontmatter":{"title":"2615 오목"}}},{"node":{"id":"c91b8fbb-756d-569e-867a-b441a01f7af8","fields":{"slug":"/boj-15686/"},"frontmatter":{"title":"15686 치킨 배달"}}},{"node":{"id":"c8a562b7-c6eb-5d5f-a167-29ea98d2d2c7","fields":{"slug":"/boj-9663/"},"frontmatter":{"title":"9663 N-Queen"}}},{"node":{"id":"b7249a5d-d62e-511f-a47b-4cae4c5d4a76","fields":{"slug":"/boj-27961/"},"frontmatter":{"title":"27961 고양이는 많을수록 좋다"}}},{"node":{"id":"830ecb3c-ea0c-5b32-932c-b78dea1fd7e6","fields":{"slug":"/prog-42839/"},"frontmatter":{"title":"42839 소수찾기"}}},{"node":{"id":"c14454eb-539e-5270-b82d-a5e74d5846e3","fields":{"slug":"/boj-11399/"},"frontmatter":{"title":"17503 맥주 축제"}}},{"node":{"id":"db022464-1f93-5ca3-b1ef-3ef7a0e53568","fields":{"slug":"/boj-1946/"},"frontmatter":{"title":"1946 신입 사원"}}},{"node":{"id":"442747fb-c36d-5ebf-b571-fc25a484ea56","fields":{"slug":"/boj-19598/"},"frontmatter":{"title":"19598 최소 회의실 개수"}}},{"node":{"id":"d1de5bbb-2949-5108-a4e8-29b57fb29120","fields":{"slug":"/boj-1003/"},"frontmatter":{"title":"1003 피보나치 함수"}}},{"node":{"id":"f66f88d3-87df-5f27-aa94-26a50d7330e8","fields":{"slug":"/boj-2212/"},"frontmatter":{"title":"2212 센서"}}},{"node":{"id":"bdb20dae-34ac-5a09-893c-74ae7b30c8fc","fields":{"slug":"/boj-11053/"},"frontmatter":{"title":"11053 가장 긴 증가하는 부분 수열"}}},{"node":{"id":"0e7377eb-09a1-531d-a44f-08c0014c411f","fields":{"slug":"/boj-9251/"},"frontmatter":{"title":"9251 LCS"}}},{"node":{"id":"9df5e584-f2a1-52e7-99a1-54cfcf2b8d98","fields":{"slug":"/boj-2225/"},"frontmatter":{"title":"2225 합분해"}}},{"node":{"id":"5ed27546-4130-51d0-a15c-fd9346bc5a0a","fields":{"slug":"/boj-1351/"},"frontmatter":{"title":"1351 무한 수열"}}},{"node":{"id":"202eda44-2909-5595-bd82-cb82f45a0ff6","fields":{"slug":"/enablewebmvc-jackson/"},"frontmatter":{"title":"@EnableWebMvc 사용해도 될까?"}}},{"node":{"id":"6d0a4c84-fa22-5a93-956d-8925e17b886f","fields":{"slug":"/annotation-modifying-with-transactional/"},"frontmatter":{"title":"@Query와 @Modifying만 사용하면 될까?"}}},{"node":{"id":"5204b390-54c4-5a3d-898b-8dbe85eeec62","fields":{"slug":"/static-resources-attack/"},"frontmatter":{"title":"디렉토리 스캔 공격은 어떻게 대응해야 할까?"}}},{"node":{"id":"2f361a7b-f132-50c6-a31d-1fb6f6cb18ba","fields":{"slug":"/method-naming/"},"frontmatter":{"title":"Java Method Naming Conventions"}}},{"node":{"id":"f4903cfa-9ebd-5f61-8c70-9f15d1fd5e15","fields":{"slug":"/ec2-cron-alert/"},"frontmatter":{"title":"서버 장애를 대비해 서버 리소스에 대한 Slack Webhook 처리하기"}}},{"node":{"id":"187c27c2-6ef1-560d-8127-7173cc083d5c","fields":{"slug":"/fail2ban-alert/"},"frontmatter":{"title":"Fail2Ban의 상태를 Slack Webhhook 처리하기"}}},{"node":{"id":"9bb120aa-03ff-507f-a287-b07192513173","fields":{"slug":"/2/"},"frontmatter":{"title":"No 'Access-Control-Allow-Origin' header is present on the requested resource"}}},{"node":{"id":"fe089a8a-241a-50b4-a390-8106ba05f4db","fields":{"slug":"/3/"},"frontmatter":{"title":"JSON serialization with Jackson don’t work properly."}}},{"node":{"id":"a6191ffd-2529-5df8-984b-8fda6c70c299","fields":{"slug":"/server-monitoring/"},"frontmatter":{"title":"서버 모니터링에 대한 생각"}}},{"node":{"id":"4a640eb1-312c-5046-a330-010c52c6c644","fields":{"slug":"/bastion-host/"},"frontmatter":{"title":"AWS Bastion Host"}}},{"node":{"id":"96f7894e-d4a9-5bf7-9bb8-830a528eb6ef","fields":{"slug":"/gitactions-connect-private-instance/"},"frontmatter":{"title":"GitHub Actions에서 SSH로 Private 인스턴스에 접근하기"}}},{"node":{"id":"20d53e3c-f47c-5a86-a5ab-6f6b58f0d20d","fields":{"slug":"/gitactions-aws-add-inbound-rule/"},"frontmatter":{"title":"AWS Security Group의 Inbound Rule에 GitHub Actions의 Public IP 추가하기"}}},{"node":{"id":"1c1b69df-adb9-53bc-bc0a-8606822aa0b2","fields":{"slug":"/1/"},"frontmatter":{"title":"301 Moved Permanently"}}},{"node":{"id":"575ef349-72c5-5c06-8530-e2ae7a85f6dc","fields":{"slug":"/1/"},"frontmatter":{"title":"Utility Class에서 생성자를 private으로 선언해야 하는 이유"}}},{"node":{"id":"f7cc2668-fdd8-5081-8d46-4112cbde352b","fields":{"slug":"/id-generator/"},"frontmatter":{"title":"ID를 만드는 방법들"}}},{"node":{"id":"81aed75e-a872-5984-9ec0-e86b482eb8c7","fields":{"slug":"/4/"},"frontmatter":{"title":"Spring에서 Object를 Bean으로 관리하는 이유는 뭘까?"}}},{"node":{"id":"32a2cb86-8f1e-5c8f-9f56-bef33a14fb49","fields":{"slug":"/cookie-session/"},"frontmatter":{"title":"쿠키(Cookie)와 세션(Session)의 차이"}}},{"node":{"id":"7d4b9ff6-50df-50b9-9ffa-626cf0f444df","fields":{"slug":"/uri-url-urn/"},"frontmatter":{"title":"URI, URL, URN의 차이"}}},{"node":{"id":"0b358ad3-9f0a-53d4-9fa7-bfbe38edf138","fields":{"slug":"/not-in-query/"},"frontmatter":{"title":"NOT IN 쿼리를 사용할 때 발생할 수 있는 문제"}}},{"node":{"id":"2a8b8bcd-f005-5fd1-a25c-396b86696c56","fields":{"slug":"/http-https/"},"frontmatter":{"title":"HTTP와 HTTPS의 차이"}}},{"node":{"id":"363816c7-cc18-5b57-acb6-2bf5a9d47d1e","fields":{"slug":"/singleton-pattern/"},"frontmatter":{"title":"싱글턴 패턴(Singleton Pattern)"}}},{"node":{"id":"dd51ec8d-5b49-5e04-94a6-55568bb010b7","fields":{"slug":"/about/"},"frontmatter":{"title":"focus and hustle"}}}]},"previous":{"fields":{"slug":"/ssl-protocol/"},"frontmatter":{"title":"SSL Protocol"}},"next":{"fields":{"slug":"/git-conventions/"},"frontmatter":{"title":"협업을 위한 Git 컨벤션"}}},"pageContext":{"id":"af6c0192-819a-5110-957c-643bdd4721be","series":null,"previousPostId":"ebf552bc-59ea-5969-b86b-bad95404ee87","nextPostId":"07aa966e-666d-563f-85c8-b3b4ad26865d"}},"staticQueryHashes":[],"slicesMap":{}}