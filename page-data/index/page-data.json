{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"allMarkdownRemark":{"group":[{"fieldValue":"Algorithm","totalCount":2},{"fieldValue":"Database","totalCount":9},{"fieldValue":"Effective Java","totalCount":1},{"fieldValue":"Java","totalCount":30},{"fieldValue":"MySQL","totalCount":2},{"fieldValue":"hoodie","totalCount":1},{"fieldValue":"writing-guide","totalCount":1}],"nodes":[{"excerpt":"LIMIT  절은 쿼리 결과에서 지정한 행 수만 레코드를 제한하여 가져오는데 사용한다. 위의 쿼리는  테이블에서 10개의 레코드만 가져온다.\n이때 MySQL의  절은 항상 쿼리의 마지막에 실행된다.  절은 두 개의 인수를 가질 수 있다.\n첫 번째 인수는 가져올 레코드의 시작 위치를 나타내며, 두 번째 인수는 가져올 레코드의 수를 나타낸다. 위의 쿼리는  …","fields":{"slug":"/mysql-limit-offset/"},"frontmatter":{"date":"January 11, 2025","update":null,"title":"MySQL의 Pagination","tags":["Database","MySQL"]}},{"excerpt":"테이블의 데이터를 삭제 시 , ,  을 사용할 수 있다. 각각의 차이점을 알아보자. DELETE 는 데이터를 하나하나 삭제면서 제거하는 방식이다.\n 절을 사용하여 조건에 맞는 행만 삭제할 수 있다.\n이러한 방식으로 데이터를 삭제해서 다른 삭제 방식보다는 느리지만 을 하지 않으면 으로 데이터는 복구할 수 있다. TRUNCATE 는 테이블의 모든 데이터를 삭…","fields":{"slug":"/mysql-delete-truncate-drop/"},"frontmatter":{"date":"January 10, 2025","update":null,"title":"MySQL의 DELETE, TRUNCATE, DROP 차이","tags":["Database","MySQL"]}},{"excerpt":"캐시는 데이터를 저장하는 장소로, 데이터를 빠르게 조회할 수 있도록 도와주어 성능 향상과 부하 감소를 목표로 한다.\n이때 캐시를 사용하는 양상이 서비스에 큰 영향을 끼치기도 한다.\n따라서, 캐싱 전략을 이해하는 것은 중요하다. Cache Aside(Lazy Loading) Cache Aside 방식은 캐시 히트 시 캐시에서 데이터를 불러오며, 캐시 미스 …","fields":{"slug":"/database-architecture-caching-strategy/"},"frontmatter":{"date":"January 09, 2025","update":null,"title":"캐싱 전략(Caching Strategy)","tags":["Database"]}},{"excerpt":"제약 조건(Constraints) 제약 조건이란 데이터의 무결성을 보장하기 위해, 데이터베이스에 저장되는 데이터의 논리적인 조건을 의미한다.\n이러한 제약 조건은 문을 사용하여 테이블을 생성할 때나,\n문을 사용하여 테이블을 생성한 후에 제약조건을 지정할 수 있다.\n이와 같은 DDL(Data Definition Language) 문을 사용하여 테이블에 설정할…","fields":{"slug":"/database-constraints/"},"frontmatter":{"date":"January 09, 2025","update":null,"title":"제약 조건(Constraints)","tags":["Database"]}},{"excerpt":"SQL(Structured Query Language) SQL(Structured Query Language)은 관계형 데이터베이스를 관리하고 조작하기 위한 구조화된 질의 언어이다.\n기능에 따라 데이터 정의 언어(DDL), 데이터 조작 언어(DML), 데이터 제어 언어(DCL) 등으로 나뉜다. SQL 동작 과정 SQL은 데이터베이스에 대한 질의를 수행하기…","fields":{"slug":"/database-sql/"},"frontmatter":{"date":"January 08, 2025","update":null,"title":"SQL(Structured Query Language)","tags":["Database"]}},{"excerpt":"관계형 데이터베이스 관리 시스템 관계형 데이터베이스 관리 시스템(Relational Database Management System, RDBMS)은\n관계형 데이터 모델을 기반으로 한 데이터베이스 관리 시스템을 말한다.\n대부분의 데이터베이스 시스템은 RDBMS를 기반으로 설계되어 있으며,\n대표적인 RDBMS로는 Oracle, MySQL, PostgreSQL…","fields":{"slug":"/database-rdbms/"},"frontmatter":{"date":"January 03, 2025","update":null,"title":"관계형 데이터베이스 관리 시스템(RDBMS)","tags":["Database"]}},{"excerpt":"데이터 독립성 데이터 독립성(Data Independence)이란 데이터베이스 시스템의 중요한 특징 중 하나로,\n데이터베이스 시스템은 데이터와 응용 프로그램을 독립적으로 관리할 수 있도록 설계되어 있다.\n이러한 데이터 독립성은 데이터베이스의 유지보수와 확장성을 향상시키는 장점을 가진다.\n데이터 독립성은 논리적 데이터 독립성과 물리적 데이터 독립성으로 나눌…","fields":{"slug":"/database-data-independency/"},"frontmatter":{"date":"January 02, 2025","update":null,"title":"데이터 독립성(Data Independence)","tags":["Database"]}},{"excerpt":"많은 경우의 클래스들은 하나 이상의 리소스에 의존하는 양상을 띈다.\n알림을 보내는  클래스와 이메일을 보내는  클래스가 있다고 가정해보자.\n는 를 사용하여 이메일을 보낸다.\n여기서 가  리소스에 의존한다고 말한다.\n이때  클래스는 다음과 같이 구현하는 경우가 있다. 정적 유틸리티 클래스(Static Utility Class) 다음 코드는 알림을 보내는 를…","fields":{"slug":"/effective-java-dependency-injection/"},"frontmatter":{"date":"January 01, 2025","update":null,"title":"자원을 직접 명시하지 말고 의존 객체 주입을 사용하라","tags":["Java","Effective Java"]}},{"excerpt":"자바가 제공하는 열거형(Enum) 타입은 서로 연관된 상수들의 집합을 의미한다.\n이러한 자바의 열거형을 이해하기 전에 먼저 열거형이 생겨난 이유에 대해 알아야 한다. 문자열과 타입 안전성 다음과 같은 상황을 가정하고 코드를 구현해 가면서 근본적인 문제점을 파악해 보겠다. 요구사항은 다음과 같다.\n고객을 , ,  등급으로 분류하고 각 등급에 따라 할인율을 …","fields":{"slug":"/java-enum/"},"frontmatter":{"date":"December 28, 2024","update":null,"title":"자바 열거형 타입(Type-Safe Enum Pattern)","tags":["Java"]}},{"excerpt":"Class 클래스 자바에서  클래스는 클래스의 정보(메타데이터)를 다루는데 사용된다.\n 클래스를 토앻 개발자는 실행 중인 자바 애플리케이션 내에서 필요한 클래스의 정보를 조회하고 조작할 수 있다.  클래스의 주요 기능은 다음과 같다. 타입 정보 얻기: 클래스의 이름, 슈퍼 클래스, 인터페이스, 필드, 메서드, 생성자 정보 등과 같은 정보를 얻을 수 있다.…","fields":{"slug":"/java-class-system/"},"frontmatter":{"date":"December 27, 2024","update":null,"title":"자바 Class 클래스와 System 클래스","tags":["Java"]}},{"excerpt":"Wrapper Class 자바에서 기본형 타입을 객체로 다루기 위해 제공하는 클래스를 래퍼 클래스(Wrapper Class)라고 한다.\n래퍼 클래스는 기본형의 한계 때문에 객체로 다루어야 할 때 사용한다. 기본형의 한계 자바는 객체 지향 언어이지만, 자바가 제공하는 것들 중 객체가 아닌 것들이 있다.\n그것들은 , , ,  등과 같은 기본형(Primitiv…","fields":{"slug":"/java-wrapper-class/"},"frontmatter":{"date":"December 26, 2024","update":null,"title":"래퍼 클래스(Wrapper Class)","tags":["Java"]}},{"excerpt":"String Optimization 자바 컴파일러는 다음과 같이 문자열을 처리하는 코드를 만나면, 이를 최적화하여 하나의 문자열로 만들어준다. String literal 결합 최적화 위 코드는 과 를 합쳐 에 저장하는 코드이다. 하지만 자바 컴파일러는 이 코드를 다음과 같이 최적화하여 처리한다. 컴파일과정에서 문자열을 합치는 코드를 만나면, 이를 최적화하…","fields":{"slug":"/java-string-optimization/"},"frontmatter":{"date":"December 24, 2024","update":null,"title":"문자열 최적화(String Optimization)","tags":["Java"]}},{"excerpt":"불변 객체(Immutable Object) 객체의 상태(객체 내부 데이터, 필드, 속성)가 객체의 수명 동안 변하지 않는 객체를 불변 객체(Immutable Object)라고 한다.\n불변 객체는 객체의 상태가 변하지 않기 때문에 객체를 생성한 시점의 상태를 유지하며, 객체의 상태를 변경할 수 없다. 자바에서 가장 많이 사용되는  또한 불변 객체이다.\n뿐만…","fields":{"slug":"/java-immutable/"},"frontmatter":{"date":"December 23, 2024","update":null,"title":"불변 객체(Immutable Object)","tags":["Java"]}},{"excerpt":"여기서 가치있는 정보를 얻으려면 데이터를 많이 수집해야하지만, 무조건 많이 수집하는 것만으로는 충분하지 않다.\n수집된 데이터를 효율적으로 관리하고 언제든 필요한 정보를 빠르게 찾아낼 수 있어야 한다.\n이 글에서는 이러한 효율적인 데이터 관리를 위한 데이터베이스 관리 시스템(DBMS)에 대해 알아본다. 파일 시스템의 문제점 데이터베이스 관리 시스템(DBMS…","fields":{"slug":"/database-dbms/"},"frontmatter":{"date":"December 21, 2024","update":null,"title":"데이터베이스 관리 시스템(DBMS)","tags":["Database"]}},{"excerpt":"Phantom Read란 무엇인가? Phantom Read는 트랜잭션이 동일한 조건의 쿼리를 반복 실행할 때, 나중에 실행된 쿼리에서 처음에는 존재하지 않았던 새로운 행이 나타나는 현상을 말한다.\n이는 주로 읽기 일관성(Read Consistency) 을 유지하는 과정에서 발생할 수 있는 문제로, 데이터의 삽입이나 삭제가 다른 트랜잭션에 의해 이루어질 때…","fields":{"slug":"/database-phantom-read/"},"frontmatter":{"date":"December 21, 2024","update":null,"title":"Phantom Read와 Gap Lock, Next-Key Lock","tags":["Database"]}},{"excerpt":"기본형(Primitive)과 참조형(Reference) 자바의 데이터 타입은 크게 기본형(Primitive)과 참조형(Reference)으로 나눌 수 있다.\n기본형은 정수, 실수, 문자, 논리 등의 값을 저장하는 데이터 타입이고, 참조형은 객체의 주소값을 저장하는 데이터 타입이다.\n기본형과 참조형의 차이점을 이해하고, 데이터 타입을 사용할 때 주의할 점을…","fields":{"slug":"/java-primitive-reference/"},"frontmatter":{"date":"December 20, 2024","update":null,"title":"기본형(Primitive)과 참조형(Reference)","tags":["Java"]}},{"excerpt":"동일성와 동등성 자바에서는 두 객체가 같은지 비교하는 두 가지 방법이 있다. 동일성(Identity):  연산자를 사용하여 두 객체의 주소값을 비교해서 동일한 객체를 참조하는지 확인 동등성(Equality):  메서드를 사용하여 두 객체의 내용이 같은지 확인 쉽게 설명하면  연산자는 두 객체의 주소값을 비교하는 것이고,  메서드는 두 객체의 내용을 비교하…","fields":{"slug":"/java-identity-equality/"},"frontmatter":{"date":"December 19, 2024","update":null,"title":"동일성(Identity)와 동등성(Equality)","tags":["Java"]}},{"excerpt":"Object 클래스를 알아가기 전에 먼저 Object 클래스가 속한 패키지에 대해 알아야 한다.\nObject 클래스가 속한 패키지는  패키지에 포함되어 있다. java.lang 패키지 소개 자바가 기본으로 제공하는 라이브러리(클래스 모음) 중에 가장 기본이 되는 패키지로 여기서 은 를 의미한다. 즉, 자바를 이루는 가장 기본이 되는 클래스들의 패키지라고 …","fields":{"slug":"/java-object/"},"frontmatter":{"date":"December 16, 2024","update":null,"title":"자바 Object 클래스","tags":["Java"]}},{"excerpt":"JVM(Java Virtual Machine) JVM(Java Virtual Machine)은 자바 프로그램이 실행되는 환경으로, 운영체제와 독립적으로 동작할 수 있도록 중간 역할을 한다.\n그럼 어떻게 JVM이 동작하길래 운영체제에 독립적인지 알아보자. JVM 동작 방식 JVM은 자바 애플리케이션을 실행하기 위해 메모리를 할당받고, 자바 소스 파일을 바이…","fields":{"slug":"/java-virtual-machine/"},"frontmatter":{"date":"November 25, 2024","update":null,"title":"자바 가상 머신(Java Virtual Machine)","tags":["Java"]}},{"excerpt":"GC(Garbage Collection) **가비지 컬렉션(Garbage Collection, GC)**은 자바의 메모리 관리 방식 중 하나로, JVM(자바 가상 머신)의 힙(Heap) 영역에서 더 이상 사용되지 않는 객체(garbage)를 자동으로 식별하고 제거하는 프로세스를 의미한다.\n이는 프로그래머가 직접 메모리를 할당하고 해제해야 했던 C/C++와…","fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"date":"November 24, 2024","update":null,"title":"가비지 컬렉션(Garbage Collection)","tags":["Java"]}},{"excerpt":"Vector와 Hashtable 그리고 Collections.SynchronizedXXX 와  그리고  메서드의 공통점은 모두 한 컬렉션으로 동기화된 메서드로 구성되어 있다는 것이다.\n한 컬렉션이면 보통 멀티 스레드 환경에서 안전하게 사용할 수 있다고 생각할 수 있지만, 실제로는 성능이 저하되는 문제가 발생할 수 있다.\n그럼 와  그리고  메서드의 문제점…","fields":{"slug":"/java-vector-hashtable-synchronizedxxx/"},"frontmatter":{"date":"November 22, 2024","update":null,"title":"Vector와 Hashtable 그리고 Collections.SynchronizedXXX","tags":["Java"]}},{"excerpt":"SynchronizedList와 CopyOnWriteArrayList의 차이 SynchronizedList 를 사용해 기존 리스트를 동기화된 형태로 래핑한 클래스다. 특징: 내부적으로 모든 메서드가 동기화()되어 다중 스레드에서 안전하게 사용 가능. 읽기 및 쓰기 작업 모두 락을 사용하여 성능이 저하될 수 있음. 반복(iteration) 작업은 추가로 동…","fields":{"slug":"/java-synchroniedlist-copyonwritearraylist/"},"frontmatter":{"date":"November 22, 2024","update":null,"title":"SynchronizedList와 CopyOnWriteArrayList의 차이","tags":["Java"]}},{"excerpt":"SynchronizedMap와 ConcurrentHashMap 과 은 둘 다 멀티 스레드 환경에서 사용할 수 있는 Map 구현체이다.\n하지만 두 클래스는 서로 다른 방식으로 동기화를 제공한다.\n이 글에서는 두 클래스의 차이점을 알아보고, 어떤 상황에서 어떤 클래스를 사용해야 하는지 알아보겠다. SynchronizedMap 은  메소드를 통해 생성할 수 있…","fields":{"slug":"/java-concurrenthashmap-synchronizedmap/"},"frontmatter":{"date":"November 22, 2024","update":null,"title":"SynchronizedMap vs ConcurrentHashMap","tags":["Java"]}},{"excerpt":"CAS와 ABA CAS(Compare-And-Swap)와 ABA 문제에 대해 알아보기에 앞서 동기화와 Lock-Based 알고리즘, Lock-Free 알고리즘에 대해 알아보자. 동시성(Concurrency)과 병렬성(Parallelism) 동시성과 병렬성은 비슷한 개념이지만, 다르다.\n동시성은 여러 작업을 동시에 처리하는 것이고, 병렬성은 여러 작업을 동…","fields":{"slug":"/java-cas-aba/"},"frontmatter":{"date":"November 21, 2024","update":null,"title":"CAS(Compare-And-Swap)와 ABA 문제","tags":["Java"]}},{"excerpt":"자바의 멀티 스레딩 이 글에서는 자바에서의 멀티 스레딩을 이해하는 과정에서 필요한 개념을 정리한다. 동시성과 병렬성의 차이점 동시성()과 병렬성()은 다중 작업을 처리하는 방식에서 차이가 있다. 동시성(): 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 CPU가 시분할 방식으로 실행한다. 병렬성(): 여러 작업이 물리적으로 동시에 실행됩니다. 멀…","fields":{"slug":"/java-multi-thread/"},"frontmatter":{"date":"November 20, 2024","update":null,"title":"자바 멀티 스레딩","tags":["Java"]}},{"excerpt":"HashMap 컬렉션 HashMap의 동작 원리 ****은 키-값() 쌍을 저장하는 데 사용되는 자바의 컬렉션으로, 내부적으로 해시 테이블(Hash Table) 자료구조를 사용합니다. 데이터를 저장, 검색, 삭제하는 데 효율적이며, 다음과 같은 방식으로 동작한다. 저장 구조 은 내부적으로 배열과 연결 리스트(또는 트리)를 조합하여 데이터를 저장한다. 배열…","fields":{"slug":"/java-hashmap/"},"frontmatter":{"date":"November 18, 2024","update":null,"title":"HashMap 컬렉션","tags":["Java"]}},{"excerpt":"ArrayList 컬렉션 는 자바의 컬렉션 프레임워크에서 배열 기반으로 동작하는  인터페이스의 구현체 중 하나로 가장 많이 사용되는 컬렉션에 속한다.\n이 글에서는 자바의  컬렉션에 대해 다른 컬렉션들과 비교를 하며 알아보겠다. ArrayList 특징 먼저 의 특징에 대해서 알아보자. 연속적인 데이터 저장 데이터는 연속적으로 저장되며, 리스트 중간에 빈 공…","fields":{"slug":"/java-arraylist/"},"frontmatter":{"date":"November 17, 2024","update":null,"title":"ArrayList 컬렉션","tags":["Java"]}},{"excerpt":"자바의 멀티 스레딩 이 글에서는 자바에서의 멀티 스레딩을 이해하는 과정에서 필요한 개념을 정리한다. 동시성과 병렬성의 차이점 동시성()과 병렬성()은 다중 작업을 처리하는 방식에서 차이가 있다. 동시성(): 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 CPU가 시분할 방식으로 실행한다. 병렬성(): 여러 작업이 물리적으로 동시에 실행됩니다. 멀…","fields":{"slug":"/java-atomic/"},"frontmatter":{"date":"November 17, 2024","update":null,"title":"멀티 스레드 환경에서 동시성 프로그래밍","tags":["Java"]}},{"excerpt":"프로세스와 스레드 이 글에서는 자바의 스레드()를 이해하기에 앞서 운영체제를 공부하게 되면 접하게 되는 프로세스와 스레드를 알아간다.\n간단히 설명을 달아보면 프로세스는 운영체제로부터 필요한 자원을 할당받은 작업의 단위로 보면 되고, 스레드는 이러한 프로세스의 자원을 활용해 실제 작업을 수행하는 단위라고 알고 가면 된다. 프로세스 프로세스에 이해하기에 앞서…","fields":{"slug":"/java-thread/"},"frontmatter":{"date":"November 14, 2024","update":null,"title":"프로세스(Process)와 스레드(Thread)","tags":["Java"]}},{"excerpt":"자바에서는 컬렉션 프레임워크(Java Collection Framework)을 제공한다. 이는 자바 프로그래밍을 하면서 없어서는 안되는 필수적인 요소이다.\n이 글에서는 자바의 컬렉션 프레임워크에 대해 알아본다. 자바 컬렉션 프레임워크 자바 컬렉션 프레임워크에서 컬렉션()이란 무엇인지 부터 알아보자.\n컬렉션은 다수의 요소를 하나의 그룹으로 묶어 효율적으로 …","fields":{"slug":"/java-collection-framework/"},"frontmatter":{"date":"November 14, 2024","update":null,"title":"자바 컬렉션 프레임워크(Collection Framework)","tags":["Java"]}},{"excerpt":"자바에서 예외처리는 오류를 예측하고 이에 대응하여 프로그램의 안정성을 높일 뿐만 아니라, 상황에 따라서 단순히 발생한 오류를 잡아내는 것을 넘어, 필요에 따라 예외를 발생시키거나 떠넘기고,\n예외를 다른 예외로 감싸 처리하는 등 다양한 방법을 유현하게 활용하여 코드의 가독성과 유지보수성을 높일 수 있다. 이 글에서는 자바의 예외처리 핵심 개념인 와  그리고…","fields":{"slug":"/java-throw-chained-exception/"},"frontmatter":{"date":"November 06, 2024","update":null,"title":"throw와 throws 그리고 Chained Exception","tags":["Java"]}},{"excerpt":"리플렉션(Reflection) 리플렉션은 런타임 중에 클래스의 속성, 메서드, 타입 등을 조사하고 수정할 수 있는 자바 API입니다. 리플렉션을 사용하면 컴파일 시간에는 알 수 없던 클래스 정보에 접근하거나, 동적으로 객체를 생성하고 메서드를 호출할 수 있습니다.\n프로그램이 실행 중 경로에 존재하는 코드들을 하나하나 확인하는 것 왜 사용할까? 주석처럼 코…","fields":{"slug":"/java-reflection/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 리플렉션(Reflection)","tags":["Java"]}},{"excerpt":"이 글은 예외 처리를 알아보는 글이다. 앞서 에러와 예외의 구분, 컴파일에러와 런타임에러의 차이, 과 에 대한 기본적인 이해가 필요하다. 자바의 Error와 Exception 이해하기\n자바의 throw와 throws 그리고 Chained Exception 이해하기 예외 처리하기(Exception Handling) 예외 처리란 프로그램이 실행 중 발생할 수…","fields":{"slug":"/java-try-catch/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 예외 처리하기(Exception Handling)","tags":["Java"]}},{"excerpt":"프로그래밍을 처음 배우면 와 같이 콘솔에 출력을 시도하게 된다.\n콘솔 창에 \"프로그램이 정상적으로 동작함을 확인하는 과정은 모든 개발자가 겪는 경험일 것이다.\n우리는 원하는 기능을 구현한 후, 값이 제대로 출력되는지 확인하기 위해 종종 을 사용한다. 그러나 을 무차별적으로 사용해서는 안 된다. 그 이유는 무엇인지 아래에서 자세히 알아보자. System.o…","fields":{"slug":"/java-systemout-log/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"System.out.println()를 사용한 로깅을 피해야 하는 이유","tags":["Java"]}},{"excerpt":"String 자바에서 문자를 다루는 대표적인 타입은 와  이렇게 2가지가 있다.\n기본형인 는 문자 하나를 다루는데 사용되고, 를 사용해서 여러 문자 즉 문자열을 다루기 위해선 을 사용해야 한다.\n하지만 이렇게 을 사용하면 문자열을 다루는데 불편함이 있어서 자바에서는 이라는 클래스를 제공한다. String 내부 구조  클래스는 대략 다음과 같은 구조로 이루…","fields":{"slug":"/java-string/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 문자열(String)","tags":["Java"]}},{"excerpt":"자바에서는 , , 라는 3가지 클래스 자료형을 통해 문자열을 다룰 수 있다. 어떤 상황에 어떤 자료형을 사용하는 것이 성능적인 측면에서 좋은지 알아본다. StringBuffer / StringBuilder 클래스 와  클래스는 문자열을 연결이나 수정하는 연산을 할 때 주로 사용하는 자료형이다. 이 둘의 차이점을 간단하게 하자면 는 멀티 쓰레드 환경에서 안…","fields":{"slug":"/java-string-stringbuffer-stringbuilder/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"String과 StringBuffer 그리고 StringBuilder","tags":["Java"]}},{"excerpt":"문제 암기왕  풀이 문제를 보면 해당 문제는 탐색 알고리즘을 사용해서 해결하라는 것을 알 수 있다.\n어떤 탐색 알고리즘을 사용하냐는 시간제한과 실제 탐색해야할 개수를 보고 선택해야 한다.\n내가 생각한 건 2가지 방식이다.\n하나는 순차 탐색하여 해결하는 방식과 나머지 하나는 이분 탐색으로 해결하는 방식이다.\n직접 탐색에 경우는 과 이 각가 최대 이므로 단순…","fields":{"slug":"/2776/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"2776 암기왕","tags":["Algorithm"]}},{"excerpt":"랜선 자르기 랜선 자르기 링크 시간 제한 메모리 제한 제출 정답 맞힌 사람 정답 비율 2 초 256 MB 254208 61202 41370 21.687% 문제 집에서 시간을 보내던 오영식은 박성원의 부름을 받고 급히 달려왔다.\n박성원이 캠프 때 쓸 N개의 랜선을 만들어야 하는데 너무 바빠서 영식이에게 도움을 청했다.  이미 오영식은 자체적으로 K개의 랜선…","fields":{"slug":"/boj-1654/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"1654 랜선 자르기","tags":["Algorithm"]}},{"excerpt":"람다 표현식(Lambda Expression) 람다 표현식(Lambda Expression)은 함수형 프로그래밍을 위해 자바에서 제공하는 간결한 함수식으로, 자바의 메서드를 간단하게 표현할 수 있는 방법이다.\n기존 자바에서는 메서드를 표현하려면 별도의 클래스를 정의해야 했지만, 람다 표현식을 사용하면 메서드의 이름과 반환값을 생략하여 코드가 간결해지게 할…","fields":{"slug":"/java-lambda-stream/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 람다(Lambda)와 스트림(Stream)","tags":["Java"]}},{"excerpt":"제네릭(Generics)이란? 자바에서 제네릭(Generics)은 클래스 내부에서 사용할 데이터 타입을 외부에서 지정할 수 있는 기법을 의미한다.\n제네릭을 통해 각 객체가 서로 다른 타입의 데이터를 다룰 수 있게 되어, 객체 지향 프로그래밍의 다형성을 더욱 유연하게 활용할 수 있다. 예를 들어, 자주 사용되는 와 같은 컬렉션 클래스에서 과 같은 꺾쇠 괄호…","fields":{"slug":"/java-generic/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 제네릭(Generics)","tags":["Java"]}},{"excerpt":"프로그램에서 오류가 발생하면 시스템 레벨에서 문제를 일으켜 원치 않는 버그를 유발하거나, 심각한 경우 프로그램을 강제로 종료시키기도 한다.\n이러한 오류의 원인은 다양하며, 내부적으로 프로그램 설계 로직의 허점에서 비롯될 수 있고, 외부적으로는 프로그램 자체가 아닌 하드웨어 문제로 인해 발생할 수도 있다. 이 글에서는 자바 이것들을 어떻게 처리하는 알아본다…","fields":{"slug":"/java-exception-error/"},"frontmatter":{"date":"November 05, 2024","update":null,"title":"자바 에러(Error)와 예외처리(Exception)","tags":["Java"]}},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","update":"Apr 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}