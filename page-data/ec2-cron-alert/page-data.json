{"componentChunkName":"component---src-templates-post-jsx","path":"/ec2-cron-alert/","result":{"data":{"site":{"siteMetadata":{"title":"023.log"}},"markdownRemark":{"id":"f4903cfa-9ebd-5f61-8c70-9f15d1fd5e15","excerpt":"왜 알림이 필요할까? 저번에 서버에 대한 악성 공격으로 인해 스프링 애플리케이션을 올려놓은 컨테이너의 리소스 사용량이 급격히 증가하다가 결국 OOM(Out Of Memory) 이슈로 서버가 다운되었던 경험이 있었다.\n그래서 Nginx 단에서 필터링을 적용하고, Fail2Ban을 통해 악성 공격을차단하는 방법을 사용했다\n하지만 이건 악성 공격에 대한 대응이…","html":"<h2 id=\"왜-알림이-필요할까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%95%8C%EB%A6%BC%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\"왜 알림이 필요할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>왜 알림이 필요할까?</h2>\n<p>저번에 서버에 대한 악성 공격으로 인해 스프링 애플리케이션을 올려놓은 컨테이너의 리소스 사용량이 급격히 증가하다가 결국 OOM(Out Of Memory) 이슈로 서버가 다운되었던 경험이 있었다.\n그래서 Nginx 단에서 필터링을 적용하고, Fail2Ban을 통해 악성 공격을차단하는 방법을 사용했다\n하지만 이건 악성 공격에 대한 대응이었고, 서버에 대한 상태를 체크하고 알림을 받아 미리 대응할 수 있도록 해야 한다고 생각했다.</p>\n<h2 id=\"어떤-알림이-필요할까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-%EC%95%8C%EB%A6%BC%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\"어떤 알림이 필요할까 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>어떤 알림이 필요할까?</h2>\n<p>먼저 서버 리소스에 대한 알림이 필수적으로 필요하다고 생각했다.\n그래서 생각한 알림은 다음과 같다.</p>\n<ul>\n<li>CPU 사용률이 임계치를 초과했을 때</li>\n<li>메모리 사용량이 급증하여 OOM 발생 가능성이 높을 때</li>\n<li>디스크 사용량이 일정 임계치를 초과했을 때</li>\n</ul>\n<p>그리고 컨테이너 자체에 대한 알림도 필요하다고 생각했다.\n컨테이너가 중지되거나 컨테이너의 CPU 및 메모리 사용량이 비정상적으로 증가했을 때 알림을 받기로 했다.</p>\n<p>이제 어떤 알림을 받을지 결정했고, 그럼 어떻게 알림 서비를 만들어야 할까를 생각을 봐야한다.\n필자는 앞선 글에서 Slack을 사용하여 알림을 받았기 때문에 이번에도 Slack을 사용하여 알림을 받기로 했다.\n이후에 Prometheus + Grafana로 확장할 예정이며, AWS CloudWatch도 고려할 수도 있을 것 같다.</p>\n<h2 id=\"슬랙-웹훅-생성\" style=\"position:relative;\"><a href=\"#%EC%8A%AC%EB%9E%99-%EC%9B%B9%ED%9B%85-%EC%83%9D%EC%84%B1\" aria-label=\"슬랙 웹훅 생성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>슬랙 웹훅 생성</h2>\n<p>Slack 채널에서 Webhook을 생성한 후, 해당 URL을 사용하여 슬랙 알림을 받을 수 있다.\n방법은 다음과 같다.</p>\n<ol>\n<li>Slack 앱에서 Incoming Webhooks 추가</li>\n<li>Webhook을 설정한 채널 선택 후, Webhook URL을 생성</li>\n</ol>\n<p>여기서 생성되는 URL의 예시는 <code class=\"language-text\">https://hooks.slack.com/services/~</code> 이런 형식이다.\n참고하길 바란다.</p>\n<h3 id=\"스크립트-작성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"스크립트 작성 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>스크립트 작성</h3>\n<p>이제 알림을 받을 곳을 설정했으니, 알림을 보낼 스크립트를 작성해야 한다.</p>\n<p>먼저 서버 리소스 모니터링 스크립트이다.\n앞서 언급한 대로 서버의 CPU, 메모리, 디스크 사용량을 모니터링하고, 임계치를 초과했을 때 슬랙 알림을 받을 수 있도록 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># Slack Webhook URL (수정 필요)</span>\n<span class=\"token assign-left variable\">WEBHOOK_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://hooks.slack.com/services/~\"</span>\n\n<span class=\"token comment\"># Server Information</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">hostname</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">TIMESTAMP</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token string\">\"+%Y-%m-%d %H:%M:%S\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># System Metrics</span>\n<span class=\"token assign-left variable\">CPU_USAGE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">top</span> <span class=\"token parameter variable\">-bn1</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"Cpu(s)\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $2 + $4}'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">MEMORY_USAGE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">free</span> <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'/Mem/{printf \"%.2f\", $3/$2 * 100}'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">DISK_USAGE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span> / <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'NR==2 {print $5}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/%//'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">LOAD_AVG</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uptime</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">'load average:'</span> <span class=\"token string\">'{print $2}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">UPTIME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uptime</span> <span class=\"token parameter variable\">-p</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">ACTIVE_PROCESSES</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># Thresholds</span>\n<span class=\"token assign-left variable\">CPU_THRESHOLD</span><span class=\"token operator\">=</span><span class=\"token number\">80</span>\n<span class=\"token assign-left variable\">MEMORY_THRESHOLD</span><span class=\"token operator\">=</span><span class=\"token number\">90</span>\n<span class=\"token assign-left variable\">DISK_THRESHOLD</span><span class=\"token operator\">=</span><span class=\"token number\">90</span>\n\n<span class=\"token comment\"># Slack Notification Function</span>\n<span class=\"token function-name function\">send_slack_notification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token assign-left variable\">MESSAGE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n    <span class=\"token assign-left variable\">PAYLOAD</span><span class=\"token operator\">=</span><span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>text<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>[Server Alert] <span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token variable\">${MESSAGE}</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span>\n    <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST --data-urlencode <span class=\"token string\">\"payload=<span class=\"token variable\">${PAYLOAD}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$WEBHOOK_URL</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># CPU Usage Check</span>\n<span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $<span class=\"token punctuation\">(</span>echo \"$CPU_USAGE <span class=\"token operator\">></span> $CPU_THRESHOLD\" <span class=\"token operator\">|</span> bc <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    send_slack_notification <span class=\"token string\">\"High CPU Usage Detected: <span class=\"token variable\">${CPU_USAGE}</span>%<span class=\"token entity\" title=\"\\n\">\\n</span>Load Average: <span class=\"token variable\">${LOAD_AVG}</span>\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Memory Usage Check</span>\n<span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $<span class=\"token punctuation\">(</span>echo \"$MEMORY_USAGE <span class=\"token operator\">></span> $MEMORY_THRESHOLD\" <span class=\"token operator\">|</span> bc <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    send_slack_notification <span class=\"token string\">\"High Memory Usage Detected: <span class=\"token variable\">${MEMORY_USAGE}</span>%<span class=\"token entity\" title=\"\\n\">\\n</span>Active Processes: <span class=\"token variable\">${ACTIVE_PROCESSES}</span>\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Disk Usage Check</span>\n<span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> DISK_USAGE <span class=\"token operator\">></span> DISK_THRESHOLD <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    send_slack_notification <span class=\"token string\">\"High Disk Usage Detected: <span class=\"token variable\">${DISK_USAGE}</span>%<span class=\"token entity\" title=\"\\n\">\\n</span>System Uptime: <span class=\"token variable\">${UPTIME}</span>\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>위의 스크립트는 다음과 같은 내용을 포함하고 있다.</p>\n<ul>\n<li><code class=\"language-text\">WEBHOOK_URL=\"https://hooks.slack.com/services/~\"</code>: 슬랙 웹훅 URL을 설정하는 부분이다.</li>\n<li><code class=\"language-text\">HOSTNAME=$(hostname)</code>, <code class=\"language-text\">TIMESTAMP=$(date \"+%Y-%m-%d %H:%M:%S\")</code>: 서버 정보를 가져오는 부분이다. 여기서 호스트 이름과 타임스탬프를 가져와 포맷팅을 한다.</li>\n<li><code class=\"language-text\">CPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}')</code>: CPU 사용량을 가져오는 부분이다. <code class=\"language-text\">top</code> 명령어를 사용하여 CPU 사용량을 가져온다.</li>\n<li><code class=\"language-text\">MEMORY_USAGE=$(free -m | awk '/Mem/{printf \"%.2f\", $3/$2 * 100}')</code>: 메모리 사용량을 가져오는 부분이다. <code class=\"language-text\">free</code> 명령어를 사용하여 메모리 사용량을 가져온다.</li>\n<li><code class=\"language-text\">DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')</code>: 디스크 사용량을 가져오는 부분이다. <code class=\"language-text\">df</code> 명령어를 사용하여 디스크 사용량을 가져온다.</li>\n<li><code class=\"language-text\">LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | xargs)</code>: 시스템 부하를 가져오는 부분이다. <code class=\"language-text\">uptime</code> 명령어를 사용하여 시스템 부하를 가져온다.</li>\n<li><code class=\"language-text\">UPTIME=$(uptime -p)</code>: 시스템 업타임을 가져오는 부분이다. <code class=\"language-text\">uptime</code> 명령어를 사용하여 시스템 업타임을 가져온다.</li>\n<li><code class=\"language-text\">ACTIVE_PROCESSES=$(ps aux | wc -l)</code>: 활성 프로세스 수를 가져오는 부분이다. <code class=\"language-text\">ps</code> 명령어를 사용하여 활성 프로세스 수를 가져온다.</li>\n<li><code class=\"language-text\">CPU_THRESHOLD=80</code>, <code class=\"language-text\">MEMORY_THRESHOLD=90</code>, <code class=\"language-text\">DISK_THRESHOLD=90</code>: CPU, 메모리, 디스크 사용률의 임계치를 설정한다.</li>\n<li><code class=\"language-text\">send_slack_notification()</code>: 실질적으로 슬랙 알림을 보내는 함수이다.</li>\n<li><code class=\"language-text\">if (( $(echo \"$CPU_USAGE > $CPU_THRESHOLD\" | bc -l) )); then</code>: CPU 사용량이 설정한 임계치를 초과했을 때 감지하는 부분이다.</li>\n<li><code class=\"language-text\">send_slack_notification \"High CPU Usage Detected: ${CPU_USAGE}%\\nLoad Average: ${LOAD_AVG}\"</code>: 그리고 이 부분이 진짜 슬랙 알림을 보내는 부분이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># Slack Webhook URL</span>\n<span class=\"token assign-left variable\">WEBHOOK_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://hooks.slack.com/services/~\"</span>\n\n<span class=\"token comment\"># Thresholds</span>\n<span class=\"token assign-left variable\">CPU_THRESHOLD</span><span class=\"token operator\">=</span><span class=\"token number\">80</span>\n<span class=\"token assign-left variable\">MEMORY_THRESHOLD</span><span class=\"token operator\">=</span><span class=\"token number\">90</span>\n\n<span class=\"token comment\"># Function to send Slack notifications</span>\n<span class=\"token function-name function\">send_slack_notification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token assign-left variable\">MESSAGE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n    <span class=\"token assign-left variable\">PAYLOAD</span><span class=\"token operator\">=</span><span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>text<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>[Docker Alert] <span class=\"token entity\" title=\"\\n\">\\n</span><span class=\"token variable\">${MESSAGE}</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span>\n    <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST --data-urlencode <span class=\"token string\">\"payload=<span class=\"token variable\">${PAYLOAD}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$WEBHOOK_URL</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Get running containers</span>\n<span class=\"token assign-left variable\">CONTAINERS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--format</span> <span class=\"token string\">\"{{.Names}}\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># Check container statuses</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">CONTAINER</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$CONTAINERS</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token assign-left variable\">STATUS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> inspect <span class=\"token parameter variable\">--format</span> <span class=\"token string\">'{{.State.Status}}'</span> <span class=\"token string\">\"<span class=\"token variable\">$CONTAINER</span>\"</span><span class=\"token variable\">)</span></span>\n\n    <span class=\"token comment\"># Send alert if container is not running</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$STATUS</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"running\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        send_slack_notification <span class=\"token string\">\"Container stopped: <span class=\"token variable\">$CONTAINER</span> (Status: <span class=\"token variable\">$STATUS</span>)\"</span>\n    <span class=\"token keyword\">fi</span>\n\n    <span class=\"token comment\"># Get CPU and memory usage</span>\n    <span class=\"token assign-left variable\">STATS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> stats --no-stream <span class=\"token parameter variable\">--format</span> <span class=\"token string\">\"{{.CPUPerc}} {{.MemPerc}}\"</span> <span class=\"token string\">\"<span class=\"token variable\">$CONTAINER</span>\"</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">CPU_USAGE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$STATS</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/%//'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">MEMORY_USAGE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$STATS</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $2}'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/%//'</span><span class=\"token variable\">)</span></span>\n\n    <span class=\"token comment\"># Send alert if CPU usage exceeds threshold</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $<span class=\"token punctuation\">(</span>echo \"$CPU_USAGE <span class=\"token operator\">></span> $CPU_THRESHOLD\" <span class=\"token operator\">|</span> bc <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        send_slack_notification <span class=\"token string\">\"High CPU usage detected: <span class=\"token variable\">$CONTAINER</span> - <span class=\"token variable\">${CPU_USAGE}</span>%\"</span>\n    <span class=\"token keyword\">fi</span>\n\n    <span class=\"token comment\"># Send alert if memory usage exceeds threshold</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $<span class=\"token punctuation\">(</span>echo \"$MEMORY_USAGE <span class=\"token operator\">></span> $MEMORY_THRESHOLD\" <span class=\"token operator\">|</span> bc <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        send_slack_notification <span class=\"token string\">\"High memory usage detected: <span class=\"token variable\">$CONTAINER</span> - <span class=\"token variable\">${MEMORY_USAGE}</span>%\"</span>\n    <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>위의 스크립트도 앞서 작성한 스크립트와 유사한 부분이 많다.\n이 부분에 대해서 위에서 설명한 내용과 중복되는 부분도 있지만, 그래도 포함해서 간단하게 설명하면 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">WEBHOOK_URL=\"https://hooks.slack.com/services/~\"</code>: 슬랙 웹훅 URL을 설정하는 부분이다.</li>\n<li><code class=\"language-text\">CPU_THRESHOLD=80</code>, <code class=\"language-text\">MEMORY_THRESHOLD=90</code>: CPU, 메모리 사용률의 임계치를 설정한다.</li>\n<li><code class=\"language-text\">send_slack_notification()</code>: 실질적으로 슬랙 알림을 보내는 함수이다.</li>\n<li><code class=\"language-text\">CONTAINERS=$(docker ps --format \"{{.Names}}\")</code>: 실행 중인 컨테이너 목록을 가져오는 부분이다.</li>\n<li><code class=\"language-text\">STATUS=$(docker inspect --format '{{.State.Status}}' \"$CONTAINER\")</code>: 컨테이너 상태를 가져오는 부분이다.</li>\n<li><code class=\"language-text\">STATS=$(docker stats --no-stream --format \"{{.CPUPerc}} {{.MemPerc}}\" \"$CONTAINER\")</code>: 컨테이너의 CPU 및 메모리 사용량을 가져오는 부분이다.</li>\n<li><code class=\"language-text\">CPU_USAGE=$(echo \"$STATS\" | awk '{print $1}' | sed 's/%//')</code>: 컨테이너의 CPU 사용량을 가져오는 부분이다.</li>\n<li><code class=\"language-text\">MEMORY_USAGE=$(echo \"$STATS\" | awk '{print $2}' | sed 's/%//')</code>: 컨테이너의 메모리 사용량을 가져오는 부분이다.</li>\n<li><code class=\"language-text\">if (( $(echo \"$CPU_USAGE > $CPU_THRESHOLD\" | bc -l) )); then</code>: CPU 사용량이 설정한 임계치를 초과했을 때 감지하는 부분이다.</li>\n<li><code class=\"language-text\">send_slack_notification \"High CPU usage detected: $CONTAINER - ${CPU_USAGE}%\"</code>: 그리고 이 부분이 진짜 슬랙 알림을 보내는 부분이다.</li>\n</ul>\n<p>자 이제, 스크립트를 작성을 마쳤다.\n그럼 이 스크립트들을 스케줄링을 통해 주기적으로 실행하도록 하기 위한 크론탭을 만들어 보겠다.\n아 그 전에 자신이 사용하는 Slack Webhook URL이 올바르게 동작하는지 별도로 테스트를 하고 싶으면 아래 명령어처럼 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST --data-urlencode <span class=\"token string\">\"payload={<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>text<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Test Alert from Server<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span> <span class=\"token string\">\"https://hooks.slack.com/services/~\"</span></code></pre></div>\n<h3 id=\"크론탭-설정\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%A0%ED%83%AD-%EC%84%A4%EC%A0%95\" aria-label=\"크론탭 설정 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>크론탭 설정</h3>\n<p>먼저 크론탭에 대해서 간단히 설명하자면, 리눅스 시스템에서 주기적으로 실행되는 작업을 설정할 수 있는 스케줄러이다.\n본격적으로 크론탭을 편집하기 위해 다음 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span></code></pre></div>\n<p>이렇게 하면 기본 편집기가 열리는데, 여기에 아래 스크립트를 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">*/10 * * * * /usr/local/bin/docker-monitor.sh <span class=\"token operator\">>></span> /var/log/docker-monitor.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\n*/10 * * * * /usr/local/bin/server-monitor.sh <span class=\"token operator\">>></span> /var/log/server-monitor.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></code></pre></div>\n<p>위의 스크립트도 간단히 설명하자면,</p>\n<ul>\n<li><code class=\"language-text\">*/10 * * * *</code>: 10분마다 실행하도록 설정한 부분이다.</li>\n<li><code class=\"language-text\">/usr/local/bin/docker-monitor.sh >> /var/log/docker-monitor.log 2>&amp;1</code>: 스크립트 실행 결과를 <code class=\"language-text\">/var/log/docker-monitor.log</code> 파일에 저장한다.</li>\n</ul>\n<p>필자는 위 내용처럼 10분마다 스크립트를 실행하도록 설정했다.</p>\n<p>이 부분에서 주의해야 할 점은, 크론탭을 설정할 때 크론식도 잘 설정했고, 스크립트도 잘 작성했는데,\n실행하지 못하고 있을 수도 있다.\n이때는 꼭 <code class=\"language-text\">ls -al</code>로 스크립트와 실행 권한이 있는지 확인해 보길 바란다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">-rwxr-xr-x  <span class=\"token number\">1</span> root root <span class=\"token number\">1719</span> Mar <span class=\"token number\">10</span> 05:51 docker-monitor.sh\n-rwxr-xr-x  <span class=\"token number\">1</span> root root <span class=\"token number\">1326</span> Mar <span class=\"token number\">10</span> 07:36 server-monitor.sh</code></pre></div>\n<p>위와 같이 파일에 x가 있어야 실행 권한이 있는 것이다.\n왜 이렇게 하는지 모르겠다면, 개발자의 기본 교양인 리눅스 기본 명령어를 공부해야 할 필요가 있다.</p>\n<p>아무튼 다시 돌아와서 만약에 없다면, 다음과 같이 실행 권한을 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-monitor.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/server-monitor.sh</code></pre></div>\n<p>이렇게 하면 실행 권한이 추가되어 크론탭이 정상적으로 실행될 것이다.</p>\n<p>만약 컨테이너 중지가 감지되면, 다음과 같은 메시지를 설정한 슬랙 채널로 받게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\">[Docker Alert]\nContainer <span class=\"token property\">stopped</span><span class=\"token punctuation\">:</span> jovial_mestorf\n<span class=\"token property\">Status</span><span class=\"token punctuation\">:</span> exited\nExit <span class=\"token property\">Code</span><span class=\"token punctuation\">:</span> 137\n<span class=\"token property\">Error</span><span class=\"token punctuation\">:</span> No specific error message</code></pre></div>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://api.slack.com/messaging/webhooks\">Slack Incoming Webhooks</a></li>\n<li><a href=\"https://jojoldu.tistory.com/552\">Slack Webhook API</a></li>\n<li><a href=\"https://crontab.guru/\">Cron Tab</a></li>\n</ul>","frontmatter":{"title":"서버 장애를 미리 예측할 수 있을까?","date":"March 03, 2025","update":null,"tags":["Server","AWS"],"series":null},"fields":{"slug":"/ec2-cron-alert/","readingTime":{"minutes":11.745}}},"seriesList":{"edges":[{"node":{"id":"af6c0192-819a-5110-957c-643bdd4721be","fields":{"slug":"/nginx-config/"},"frontmatter":{"title":"Nginx 설정하기 전에 보면 좋은 글"}}},{"node":{"id":"e4531ca2-2ac9-531b-9164-8b64c75e5a19","fields":{"slug":"/interview/"},"frontmatter":{"title":"면접관 사로잡기"}}},{"node":{"id":"64c66682-ed51-5379-89ee-2f70d12e2b57","fields":{"slug":"/java-exception-error/"},"frontmatter":{"title":"자바 에러(Error)와 예외처리(Exception)"}}},{"node":{"id":"454be74c-98b2-50d6-b615-f4263c00d08c","fields":{"slug":"/java-generic/"},"frontmatter":{"title":"자바 제네릭(Generics)"}}},{"node":{"id":"fc065a5d-53ab-5dd6-9dc4-b127396ed80f","fields":{"slug":"/java-lambda-stream/"},"frontmatter":{"title":"자바 람다(Lambda)와 스트림(Stream)"}}},{"node":{"id":"825cb64a-cf12-5e2e-b87c-df8b6cb230ff","fields":{"slug":"/java-try-catch/"},"frontmatter":{"title":"자바 예외 처리하기(Exception Handling)"}}},{"node":{"id":"d9372afe-4014-5507-bcbd-e38e62b29471","fields":{"slug":"/java-systemout-log/"},"frontmatter":{"title":"System.out.println()를 사용한 로깅을 피해야 하는 이유"}}},{"node":{"id":"5964f927-8a79-5de0-841b-8fed223ba0f9","fields":{"slug":"/java-string-stringbuffer-stringbuilder/"},"frontmatter":{"title":"String과 StringBuffer 그리고 StringBuilder"}}},{"node":{"id":"7aa8046a-802e-536c-b5f9-e78ad5517c2f","fields":{"slug":"/java-string/"},"frontmatter":{"title":"자바 문자열(String)"}}},{"node":{"id":"005e9485-4c2c-5c35-b905-d3ed1b9e798f","fields":{"slug":"/java-reflection/"},"frontmatter":{"title":"자바 리플렉션(Reflection)"}}},{"node":{"id":"133813fe-ca42-5aa4-841f-f6bf4141d1d3","fields":{"slug":"/java-throw-chained-exception/"},"frontmatter":{"title":"throw와 throws 그리고 Chained Exception"}}},{"node":{"id":"098b32ab-5cc8-5f3a-b9ce-06c252ec53e7","fields":{"slug":"/java-thread/"},"frontmatter":{"title":"프로세스(Process)와 스레드(Thread)"}}},{"node":{"id":"4225fe9e-27ba-5b63-b8b6-7093b3c971e7","fields":{"slug":"/java-collection-framework/"},"frontmatter":{"title":"자바 컬렉션 프레임워크(Collection Framework)"}}},{"node":{"id":"990727b3-c221-5882-9668-c35326197a0b","fields":{"slug":"/java-arraylist/"},"frontmatter":{"title":"ArrayList 컬렉션"}}},{"node":{"id":"ac99cdaa-53ef-5270-b59e-c63ad05b0ba3","fields":{"slug":"/java-atomic/"},"frontmatter":{"title":"멀티 스레드 환경에서 동시성 프로그래밍"}}},{"node":{"id":"25229769-0008-5747-b590-dbc1023da764","fields":{"slug":"/java-hashmap/"},"frontmatter":{"title":"HashMap 컬렉션"}}},{"node":{"id":"a5d8aab9-4761-54fb-8033-e3e5428162ee","fields":{"slug":"/java-multi-thread/"},"frontmatter":{"title":"자바 멀티 스레딩"}}},{"node":{"id":"10e407f2-9715-504c-a60f-29a3b4cb67df","fields":{"slug":"/java-cas-aba/"},"frontmatter":{"title":"CAS(Compare-And-Swap)와 ABA 문제"}}},{"node":{"id":"a642a0b6-afce-5363-a262-bccfb0f2ef20","fields":{"slug":"/java-synchroniedlist-copyonwritearraylist/"},"frontmatter":{"title":"SynchronizedList와 CopyOnWriteArrayList의 차이"}}},{"node":{"id":"9c443690-789a-5153-a234-67772da4ff2d","fields":{"slug":"/java-vector-hashtable-synchronizedxxx/"},"frontmatter":{"title":"Vector와 Hashtable 그리고 Collections.SynchronizedXXX"}}},{"node":{"id":"01f5976a-4e46-5969-ad10-603a8b529141","fields":{"slug":"/java-concurrenthashmap-synchronizedmap/"},"frontmatter":{"title":"SynchronizedMap vs ConcurrentHashMap"}}},{"node":{"id":"479b1b49-88d0-53dd-b25f-7b05a6d4acd7","fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"title":"가비지 컬렉션(Garbage Collection)"}}},{"node":{"id":"389d424f-8a02-5fdb-8339-76124899e09c","fields":{"slug":"/java-virtual-machine/"},"frontmatter":{"title":"자바 가상 머신(Java Virtual Machine)"}}},{"node":{"id":"af409114-6f24-5568-8d8c-1553078dd692","fields":{"slug":"/java-object/"},"frontmatter":{"title":"자바 Object 클래스"}}},{"node":{"id":"e956dc3c-ab5a-5788-ab9d-e6932f21b1cd","fields":{"slug":"/java-identity-equality/"},"frontmatter":{"title":"동일성(Identity)와 동등성(Equality)"}}},{"node":{"id":"09fe0da4-1757-5eb6-90d4-18b4ba1d5d9e","fields":{"slug":"/java-primitive-reference/"},"frontmatter":{"title":"기본형(Primitive)과 참조형(Reference)"}}},{"node":{"id":"6df7f449-35cb-5e68-8d5d-80799a314831","fields":{"slug":"/database-phantom-read/"},"frontmatter":{"title":"Phantom Read와 Gap Lock, Next-Key Lock"}}},{"node":{"id":"d4156b41-43d2-511a-90b3-af9d47d4739d","fields":{"slug":"/database-dbms/"},"frontmatter":{"title":"데이터베이스 관리 시스템(DBMS)"}}},{"node":{"id":"39296236-cab8-5f64-9c3a-4216b3db11c5","fields":{"slug":"/java-immutable/"},"frontmatter":{"title":"불변 객체(Immutable Object)"}}},{"node":{"id":"3d4ae372-9791-5064-b476-2d3aca08f12e","fields":{"slug":"/java-string-optimization/"},"frontmatter":{"title":"문자열 최적화(String Optimization)"}}},{"node":{"id":"fa45f65c-d108-57f6-a1c2-e36ed09a23b2","fields":{"slug":"/java-wrapper-class/"},"frontmatter":{"title":"래퍼 클래스(Wrapper Class)"}}},{"node":{"id":"535b9757-cd58-551a-bfe8-3657aa82ea9e","fields":{"slug":"/java-class-system/"},"frontmatter":{"title":"자바 Class 클래스와 System 클래스"}}},{"node":{"id":"8d757819-398e-5dd2-89a2-58e6bba8a704","fields":{"slug":"/java-enum/"},"frontmatter":{"title":"자바 열거형 타입(Type-Safe Enum Pattern)"}}},{"node":{"id":"7ea4d566-e53f-515a-bd42-7b1298d7d6f9","fields":{"slug":"/database-data-independency/"},"frontmatter":{"title":"데이터 독립성(Data Independence)"}}},{"node":{"id":"a395659b-15d8-5494-b9ab-f10f367bd55c","fields":{"slug":"/database-rdbms/"},"frontmatter":{"title":"관계형 데이터베이스 관리 시스템(RDBMS)"}}},{"node":{"id":"2f78f287-e52a-5403-8b0e-45e8406b20f8","fields":{"slug":"/database-sql/"},"frontmatter":{"title":"SQL(Structured Query Language)"}}},{"node":{"id":"2f2d4165-e533-5227-83dc-c78a353a5843","fields":{"slug":"/database-constraints/"},"frontmatter":{"title":"제약 조건(Constraints)"}}},{"node":{"id":"b933390c-7e98-5e83-8e61-6510f9c37a4a","fields":{"slug":"/database-architecture-caching-strategy/"},"frontmatter":{"title":"캐싱 전략(Caching Strategy)"}}},{"node":{"id":"fb5cb17b-0afd-54ed-9d15-7d39a0a1e6d8","fields":{"slug":"/mysql-delete-truncate-drop/"},"frontmatter":{"title":"MySQL의 DELETE, TRUNCATE, DROP 차이"}}},{"node":{"id":"ddc7aadd-c2b4-537e-86ef-5da0a0f987ce","fields":{"slug":"/mysql-limit-offset/"},"frontmatter":{"title":"MySQL의 Pagination"}}},{"node":{"id":"afdb871b-8a87-545a-b3d3-dcbb36454b18","fields":{"slug":"/boj-2776/"},"frontmatter":{"title":"2776 암기왕"}}},{"node":{"id":"c3de373e-9923-51bb-81bf-7e7b8acb3f9c","fields":{"slug":"/boj-1654/"},"frontmatter":{"title":"1654 랜선 자르기"}}},{"node":{"id":"d79c2dea-56e4-5f4e-ba34-3cb949e9c362","fields":{"slug":"/boj-2512/"},"frontmatter":{"title":"2512 예산"}}},{"node":{"id":"51225c19-1cf3-5058-8943-dc41bc0eac90","fields":{"slug":"/boj-11663/"},"frontmatter":{"title":"11663 선분 위의 점"}}},{"node":{"id":"c553b71b-99ee-54e4-99c1-28158b54878a","fields":{"slug":"/database-storage-and-random-sequantial-io/"},"frontmatter":{"title":"저장 매체와 랜덤 I/O, 순차 I/O"}}},{"node":{"id":"287deadf-40de-5a3a-9545-342fd478f804","fields":{"slug":"/database-index/"},"frontmatter":{"title":"인덱스(Index)"}}},{"node":{"id":"ff01aabc-69b7-5efa-b11e-9b2c2c6007ff","fields":{"slug":"/database-explain-query-hint/"},"frontmatter":{"title":"실행 계획과 쿼리 최적화"}}},{"node":{"id":"879a45c4-b438-5e30-b986-6a4fbcf179c3","fields":{"slug":"/boj-2805/"},"frontmatter":{"title":"2805 나무 자르기"}}},{"node":{"id":"5172cb65-97e3-52f1-a2ef-51935d94c748","fields":{"slug":"/boj-2343/"},"frontmatter":{"title":"2343 기타 레슨"}}},{"node":{"id":"b8479007-2406-5b98-a027-2437a5c27be6","fields":{"slug":"/boj-2470/"},"frontmatter":{"title":"2470 두 용액"}}},{"node":{"id":"7fed17e5-3250-5f81-b864-7f719203a651","fields":{"slug":"/database-ssd-faster-than-hdd/"},"frontmatter":{"title":"SSD를 사용하면 DBMS가 빨라질까?"}}},{"node":{"id":"0192b957-d4c7-5ef9-bb0d-bd44452e72ad","fields":{"slug":"/boj-2110/"},"frontmatter":{"title":"2110 공유기 설치"}}},{"node":{"id":"2840da70-822e-5706-bd49-bcef59e88efd","fields":{"slug":"/boj-1260/"},"frontmatter":{"title":"1260 DFS와 BFS"}}},{"node":{"id":"c58dd773-ac71-5951-8381-989f6a01b642","fields":{"slug":"/prog-immigration/"},"frontmatter":{"title":"프로그래머스 입국심사"}}},{"node":{"id":"c37121f6-1974-5663-94a2-f840c17b21cb","fields":{"slug":"/boj-3079/"},"frontmatter":{"title":"3079 입국심사"}}},{"node":{"id":"8f131117-8e43-550c-a9c2-f426134f7559","fields":{"slug":"/boj-1697/"},"frontmatter":{"title":"1697 숨바꼭질"}}},{"node":{"id":"5e43441d-65a2-5400-aa7e-08adda263e4a","fields":{"slug":"/boj-2667/"},"frontmatter":{"title":"2667 단지번호붙이기"}}},{"node":{"id":"5323ab88-9e67-5d24-bb72-ad4c2137a0ea","fields":{"slug":"/datavase-normalization/"},"frontmatter":{"title":"데이터베이스 정규화(Normalization)"}}},{"node":{"id":"fd4f64da-5d81-5f7a-9375-5118fd1b6c47","fields":{"slug":"/boj-1707/"},"frontmatter":{"title":"1707 이분 그래프"}}},{"node":{"id":"49a050bd-e29b-5ad5-a873-ad7900d76bbc","fields":{"slug":"/boj-2573/"},"frontmatter":{"title":"2573 빙산"}}},{"node":{"id":"7d0e1c93-56d9-556d-8ed7-7920e7470762","fields":{"slug":"/boj-12425/"},"frontmatter":{"title":"12425 윷놀이 (Small)"}}},{"node":{"id":"ef88654c-22d3-5af6-b232-ac40429fadd5","fields":{"slug":"/database-index-sql/"},"frontmatter":{"title":"인덱스만 사용하면 성능이 향상될까?"}}},{"node":{"id":"97279d93-b018-5291-a7f8-154ab9af9e06","fields":{"slug":"/database-transaction/"},"frontmatter":{"title":"DBMS는 트랜잭션을 어떻게 관리할까?"}}},{"node":{"id":"556e4443-760f-5c0e-9d3f-56bce92db6bf","fields":{"slug":"/database-isolation-level/"},"frontmatter":{"title":"트랜잭션의 격리 수준(Transaction Isolation Level)"}}},{"node":{"id":"6bb66c2b-026f-566d-84fb-df3ce4dbec95","fields":{"slug":"/boj-17825/"},"frontmatter":{"title":"17825 주사위 윳놀이"}}},{"node":{"id":"0e31350d-6754-56b2-85a5-d739d57c38af","fields":{"slug":"/jscode-study-memoir/"},"frontmatter":{"title":"JSCODE 스터디 되돌아보기"}}},{"node":{"id":"a69e3d86-fa3b-5b23-a46b-27ca07dc31cc","fields":{"slug":"/boj-1325/"},"frontmatter":{"title":"1325 효율적인 해킹"}}},{"node":{"id":"07d0b3a0-20f5-5418-87e3-6e5eff4cbd0a","fields":{"slug":"/boj-1018/"},"frontmatter":{"title":"1018 체스판 다시 칠하기"}}},{"node":{"id":"9dde491d-5904-5c61-84e7-7943094943bd","fields":{"slug":"/boj-1051/"},"frontmatter":{"title":"1051 숫자 정사각형"}}},{"node":{"id":"a563c631-3d22-5595-9063-749fc5553ad3","fields":{"slug":"/boj-2529/"},"frontmatter":{"title":"2529 부등호"}}},{"node":{"id":"b9ebae0f-eb1d-5b1e-890b-1af660585100","fields":{"slug":"/boj-2615/"},"frontmatter":{"title":"2615 오목"}}},{"node":{"id":"c91b8fbb-756d-569e-867a-b441a01f7af8","fields":{"slug":"/boj-15686/"},"frontmatter":{"title":"15686 치킨 배달"}}},{"node":{"id":"c8a562b7-c6eb-5d5f-a167-29ea98d2d2c7","fields":{"slug":"/boj-9663/"},"frontmatter":{"title":"9663 N-Queen"}}},{"node":{"id":"b7249a5d-d62e-511f-a47b-4cae4c5d4a76","fields":{"slug":"/boj-27961/"},"frontmatter":{"title":"27961 고양이는 많을수록 좋다"}}},{"node":{"id":"830ecb3c-ea0c-5b32-932c-b78dea1fd7e6","fields":{"slug":"/prog-42839/"},"frontmatter":{"title":"42839 소수찾기"}}},{"node":{"id":"c14454eb-539e-5270-b82d-a5e74d5846e3","fields":{"slug":"/boj-11399/"},"frontmatter":{"title":"17503 맥주 축제"}}},{"node":{"id":"db022464-1f93-5ca3-b1ef-3ef7a0e53568","fields":{"slug":"/boj-1946/"},"frontmatter":{"title":"1946 신입 사원"}}},{"node":{"id":"442747fb-c36d-5ebf-b571-fc25a484ea56","fields":{"slug":"/boj-19598/"},"frontmatter":{"title":"19598 최소 회의실 개수"}}},{"node":{"id":"d1de5bbb-2949-5108-a4e8-29b57fb29120","fields":{"slug":"/boj-1003/"},"frontmatter":{"title":"1003 피보나치 함수"}}},{"node":{"id":"f66f88d3-87df-5f27-aa94-26a50d7330e8","fields":{"slug":"/boj-2212/"},"frontmatter":{"title":"2212 센서"}}},{"node":{"id":"bdb20dae-34ac-5a09-893c-74ae7b30c8fc","fields":{"slug":"/boj-11053/"},"frontmatter":{"title":"11053 가장 긴 증가하는 부분 수열"}}},{"node":{"id":"0e7377eb-09a1-531d-a44f-08c0014c411f","fields":{"slug":"/boj-9251/"},"frontmatter":{"title":"9251 LCS"}}},{"node":{"id":"9df5e584-f2a1-52e7-99a1-54cfcf2b8d98","fields":{"slug":"/boj-2225/"},"frontmatter":{"title":"2225 합분해"}}},{"node":{"id":"5ed27546-4130-51d0-a15c-fd9346bc5a0a","fields":{"slug":"/boj-1351/"},"frontmatter":{"title":"1351 무한 수열"}}},{"node":{"id":"63ced38b-1e3d-57de-b03b-906629d93cf3","fields":{"slug":"/enablewebmvc-jackson/"},"frontmatter":{"title":"@EnableWebMvc 사용해도 될까?"}}},{"node":{"id":"fe87df1d-0330-5345-8fc9-6fe633d3dee1","fields":{"slug":"/annotation-modifying-with-transactional/"},"frontmatter":{"title":"@Query와 @Modifying만 사용하면 될까?"}}},{"node":{"id":"5204b390-54c4-5a3d-898b-8dbe85eeec62","fields":{"slug":"/static-resources-attack/"},"frontmatter":{"title":"서버에 비정상적인 요청은 어떻게 대응해야 할까?"}}},{"node":{"id":"f4903cfa-9ebd-5f61-8c70-9f15d1fd5e15","fields":{"slug":"/ec2-cron-alert/"},"frontmatter":{"title":"서버 장애를 미리 예측할 수 있을까?"}}},{"node":{"id":"187c27c2-6ef1-560d-8127-7173cc083d5c","fields":{"slug":"/fail2ban-alert/"},"frontmatter":{"title":"?"}}},{"node":{"id":"dd51ec8d-5b49-5e04-94a6-55568bb010b7","fields":{"slug":"/about/"},"frontmatter":{"title":"focus and hustle"}}}]},"previous":{"fields":{"slug":"/static-resources-attack/"},"frontmatter":{"title":"서버에 비정상적인 요청은 어떻게 대응해야 할까?"}},"next":{"fields":{"slug":"/fail2ban-alert/"},"frontmatter":{"title":"?"}}},"pageContext":{"id":"f4903cfa-9ebd-5f61-8c70-9f15d1fd5e15","series":null,"previousPostId":"5204b390-54c4-5a3d-898b-8dbe85eeec62","nextPostId":"187c27c2-6ef1-560d-8127-7173cc083d5c"}},"staticQueryHashes":[],"slicesMap":{}}